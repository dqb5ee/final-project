# Exploratory Data Analysis {.unnumbered}


```{python}
#import libraries
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

import warnings
warnings.filterwarnings("ignore")
```


```{python}
### Load data
data = pd.read_csv('ACLR_data.csv')
data.head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>record_id</th>
      <th>redcap_event_name</th>
      <th>sex_dashboard</th>
      <th>graft_dashboard2</th>
      <th>med_meniscus</th>
      <th>lat_meniscus</th>
      <th>lat_stab</th>
      <th>physis</th>
      <th>visit_sex</th>
      <th>visit_graft</th>
      <th>...</th>
      <th>lsi_flex_mvic_60</th>
      <th>acl_ext_isok_60</th>
      <th>con_ext_isok_60</th>
      <th>lsi_ext_isok_60</th>
      <th>acl_flex_isok_60</th>
      <th>con_flex_isok_60</th>
      <th>lsi_flex_isok_60</th>
      <th>strength_testing_complete</th>
      <th>rts</th>
      <th>rts_tss</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>visit_1_arm_1</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Male</td>
      <td>Other</td>
      <td>...</td>
      <td>NaN</td>
      <td>2.57</td>
      <td>2.92</td>
      <td>87.86</td>
      <td>1.50</td>
      <td>1.45</td>
      <td>103.32</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>visit_1_arm_1</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Female</td>
      <td>HS autograft</td>
      <td>...</td>
      <td>NaN</td>
      <td>0.97</td>
      <td>2.16</td>
      <td>45.00</td>
      <td>0.88</td>
      <td>1.20</td>
      <td>72.98</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2</td>
      <td>visit_2_arm_1</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Female</td>
      <td>HS autograft</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2</td>
      <td>visit_3_arm_1</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Female</td>
      <td>HS autograft</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>4</th>
      <td>3</td>
      <td>visit_1_arm_1</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Female</td>
      <td>HS autograft</td>
      <td>...</td>
      <td>NaN</td>
      <td>1.53</td>
      <td>1.88</td>
      <td>81.53</td>
      <td>0.93</td>
      <td>1.15</td>
      <td>81.11</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
<p>5 rows Ã— 60 columns</p>
</div>




```{python}
#Age Histogram after dropping individuals over the age of 25
plt.hist(data['age'], bins = 15)
plt.xlabel('Age')
plt.ylabel('Count')
plt.title('Age of Individuals Distribution')
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.tick_params(axis='y', which='both',length=0)

# Saving the graph
plt.show()
```


    
    



```{python}
#Histogram of ACL RSI for Patients
plt.hist(data['acl_rsi'], bins = 10)
plt.xlabel('ACL RSI')
plt.ylabel('Count')
plt.title('ACL RSI Distribution for Patients')
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.tick_params(axis='y', which='both',length=0)

# Saving the graph
plt.show()
```


    
    



```{python}
plt.scatter(data['age'], data['ikdc'])
plt.xlabel('Age')
plt.ylabel('IKDC')
plt.title('Is IKDC Correlated to the Age of the Patient?')
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.tick_params(axis='y', which='both',length=0)

# Saving the graph
plt.show()
```


    
    



```{python}
#Calculating correlation coefficient between age and ikdc
correlation_coefficient = data[['age', 'ikdc']].corr().iloc[0,1]
print(correlation_coefficient)
#Not close to negative 1, indicating there is not a strong correlation.
```

    -0.17753340913066273



```{python}
plt.scatter(data['age'], data['acl_rsi'])
plt.xlabel('Age')
plt.ylabel('ACL RSI')
plt.title('Is ACL RSI Correlated to the Age of the Patient?')
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.tick_params(axis='y', which='both',length=0)

# Saving the graph
plt.show()
```


    
    



```{python}
correlation_coefficient2 = data[['age', 'acl_rsi']].corr().iloc[0,1]
print(correlation_coefficient2)
#Correlation is still not super strong
```

    -0.16640606532621763



```{python}
plt.hist(data['tss_dashboard'], bins = 4)
plt.xlabel('Time Since Surgery Group')
plt.ylabel('Count')
plt.title('Time Since Surgery Distribution')
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.xticks([0, 1, 2, 3], ['0-3 months', '4-6 months', '7-12 months', '1+ years'])
plt.tick_params(axis='y', which='both',length=0)
# Saving the graph
plt.show()
```


    
    



```{python}
plt.hist(data['lsi_ext_isok_60'])
plt.xlabel('LSI For Isokinetic Knee Extension')
plt.ylabel('Count')
plt.title('LSI for Isokinetic Knee Extension Distribution')
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.tick_params(axis='y', which='both',length=0)

# Saving the graph
plt.show()
```


    
    



```{python}
lsi_ext_isok_60_mean = np.mean(data['lsi_ext_isok_60'])
print(lsi_ext_isok_60_mean, '%')
```

    73.83709135616758 %



```{python}
#Peak Torque recorded and normalized to body mass
plt.hist(data['acl_flex_isok_60'])
plt.xlabel('ACLR Isokinetic Flexion Torque')
plt.ylabel('Count')
plt.title('ACLR Isokinetic Flexion Torque Distribution')
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.tick_params(axis='y', which='both',length=0)

# Saving the graph
plt.show()
```


    
    



```{python}
plt.scatter(data['bmi'], data['sh_lsi'])
plt.xlabel('BMI')
plt.ylabel('Single Hop LSI')
plt.title('Correlation between Single Hop LSI and BMI')
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.tick_params(axis='y', which='both',length=0)

# Saving the graph
plt.show()
```


    
    



```{python}
# Histogram of Single Hop LSI
plt.hist(data['sh_lsi'])
plt.xlabel('Single Hop LSI')
plt.ylabel('Count')
plt.title('Single Hop LSI Distribution')
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.tick_params(axis='y', which='both',length=0)
plt.xlim(20, 150)

plt.show()
```


    
    



```{python}
# Histogram of Triple Hop LSI
plt.hist(data['th_lsi'])
plt.xlabel('Triple Hop LSI')
plt.ylabel('Count')
plt.title('Triple Hop LSI Distribution')
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.xlim(20, 150)
plt.tick_params(axis='y', which='both',length=0)

plt.show()
```


    
    



```{python}
green_mask = data['sh_lsi'] > 85


plt.scatter(data['tss_dashboard'][~green_mask], data['sh_lsi'][~green_mask], color='blue', label='sh_lsi <= 85')

plt.scatter(data['tss_dashboard'][green_mask], data['sh_lsi'][green_mask], color='green', label='sh_lsi > 85')


plt.xlabel('Time Since Surgery Groups')
plt.ylabel('Single Hop LSI')
plt.title('Any Correlation between Single Hop LSI and Time Since Surgery?')


plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)


plt.tick_params(axis='y', which='both', length=0)


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='LSI Conditions')

# Saving the graph
plt.show()
```


    
    


Patients are usually cleared for return to sports after an ACL surgery from 5-12 months. Lets look at their mental readiness (acl_rsi) at these times:


```{python}
group_5_7_months = data[data['tss_dashboard'] == '5 to 7 months']
group_8_12_months = data[data['tss_dashboard'] == '8 to 12 months']

plt.figure(figsize=(10, 6))

sns.kdeplot(group_5_7_months['acl_rsi'], label='5 to 7 months', fill=True, color='blue')
sns.kdeplot(group_8_12_months['acl_rsi'], label='8 to 12 months', fill=True, color='green')

plt.xlabel('ACL RSI')
plt.ylabel('Density')
plt.title('Distribution of ACL RSI Scores for Groups 5 to 7 Months and 8 to 12 Months')

plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)

plt.tick_params(axis='y', which='both', length=0)


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Time Since Surgery')

# Saving the graph
plt.show()
```


    
    



```{python}
counts = data['visit_graft'].value_counts()
plt.bar(counts.index, counts.values)
plt.xlabel('Graft Type at Visit')
plt.ylabel('Count')
plt.title('Type of Graft Distribution')
ax = plt.gca()
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_visible(False)
plt.tick_params(axis='y', which='both', length=0)
plt.xticks(rotation=45, ha='right')

# Saving the graph
plt.tight_layout()
plt.show()
```


    
    


BTB and HS autograft appears to be the most common graph types used. We want to examine them further:


```{python}
btb_data = data[data['visit_graft'] == 'BTB autograft']
hs_data = data[data['visit_graft'] == 'HS autograft']
plt.figure(figsize=(10, 6))

sns.kdeplot(btb_data['acl_rsi'], label='BTB Graft', fill=True, color='blue', alpha=0.6)
sns.kdeplot(hs_data['acl_rsi'], label='HS Graft', fill=True, color='green', alpha=0.6)


plt.xlabel('ACL RSI')
plt.ylabel('Density')
plt.title('Distribution of ACL RSI for BTB Graft vs HS Graft')
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.tick_params(axis='y', which='both',length=0)

plt.legend()

# Saving the graph
plt.show()

```


    
    



```{python}
# Looking further at the means of ACL RSI for BTB and HS grafts
mean_btb = np.mean(btb_data['acl_rsi'])
mean_hs = np.mean(hs_data['acl_rsi'])
print('Mean ACL RSI for BTB: ', mean_btb, '\nMean ACL RSI for HS: ', mean_hs)
```

    Mean ACL RSI for BTB:  66.71625423728814 
    Mean ACL RSI for HS:  69.58213018867924



```{python}
plt.hist(data['redcap_event_name'], bins = 5)
plt.xlabel('Event Name')
plt.ylabel('Count')
plt.title('Event Distribution')
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.xticks(rotation=45, ha='right')
plt.tick_params(axis='y', which='both',length=0)

# Saving the graph
plt.show()
```


    
    


Most of the patients only have data for their first 1-2 visits.


```{python}
helpful_data_clean = data.dropna(subset=['acl_rsi'])

plt.figure(figsize=(12, 8))


sns.kdeplot(data=helpful_data_clean, x='acl_rsi', hue='redcap_event_name', fill=True, common_norm=False, warn_singular=False)


plt.xlabel('ACL RSI')
plt.ylabel('Density')
plt.title('ACL RSI Distribution at Each Visit')


plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.tick_params(axis='y', which='both', length=0)

# Saving the graph
plt.show()
```


    
    


Looking at patients return ACL_RSI at different times since their surgery.


```{python}
average_acl_rsi_per_visit = data.groupby('tss_dashboard')['acl_rsi'].mean()
print('Mean ACL RSI at Visit:', average_acl_rsi_per_visit)
iqr_per_time = {}
for time in average_acl_rsi_per_visit.index:
    time_data = data[data['tss_dashboard'] == time]['acl_rsi'].dropna()
    q1 = time_data.quantile(0.25)
    q3 = time_data.quantile(0.75)
    iqr_per_time[time] = q3 - q1

print("IQR for each time period:", iqr_per_time)
q1_acl_rsi = data['acl_rsi'].quantile(0.25)
q3_acl_rsi = data['acl_rsi'].quantile(0.75)
iqr_acl_rsi = q3_acl_rsi - q1_acl_rsi
print(f"IQR for ACL RSI: {iqr_acl_rsi}")
```

    Mean ACL RSI at Visit: tss_dashboard
    13 to 24 months    67.849391
    3 to 4 months      57.920182
    5 to 7 months      70.263743
    8 to 12 months     76.423492
    Not Reported       60.345864
    Preoperative             NaN
    Name: acl_rsi, dtype: float64
    IQR for each time period: {'13 to 24 months': 37.285, '3 to 4 months': 35.0, '5 to 7 months': 33.3, '8 to 12 months': 31.975, 'Not Reported': 37.7225, 'Preoperative': nan}
    IQR for ACL RSI: 36.67


Looking at the correlation matrix of some variables we plan to use in our report:


```{python}
important_data = data[['age', 'acl_rsi', 'koos_pain', 'lsi_ext_isok_60', 'lsi_flex_isok_60', 'lsi_ext_mvic_60', 'lsi_flex_mvic_60', 'sh_lsi', 'th_lsi']]
correlation_matrix = important_data.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', cbar=True, square=True, linewidths=0.5, linecolor='black')
plt.figure(figsize=(12, 8))
plt.show()
```


    





```{python}
# Looking at descriptive statistics for some of the variables we used in our report
pd.DataFrame(important_data.describe())
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>age</th>
      <th>acl_rsi</th>
      <th>koos_pain</th>
      <th>lsi_ext_isok_60</th>
      <th>lsi_flex_isok_60</th>
      <th>lsi_ext_mvic_60</th>
      <th>lsi_flex_mvic_60</th>
      <th>sh_lsi</th>
      <th>th_lsi</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>4371.000000</td>
      <td>2886.000000</td>
      <td>2143.000000</td>
      <td>2017.000000</td>
      <td>2012.000000</td>
      <td>996.000000</td>
      <td>986.00</td>
      <td>2107.000000</td>
      <td>1343.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>17.306231</td>
      <td>67.352110</td>
      <td>91.402277</td>
      <td>73.837091</td>
      <td>90.162087</td>
      <td>77.873584</td>
      <td>inf</td>
      <td>92.673478</td>
      <td>94.635314</td>
    </tr>
    <tr>
      <th>std</th>
      <td>2.633281</td>
      <td>23.539202</td>
      <td>9.606058</td>
      <td>22.203231</td>
      <td>18.787932</td>
      <td>26.995961</td>
      <td>NaN</td>
      <td>12.619013</td>
      <td>11.593727</td>
    </tr>
    <tr>
      <th>min</th>
      <td>8.855556</td>
      <td>0.000000</td>
      <td>8.900000</td>
      <td>10.967185</td>
      <td>22.550000</td>
      <td>13.390000</td>
      <td>25.32</td>
      <td>34.170000</td>
      <td>0.220000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>15.680556</td>
      <td>50.830000</td>
      <td>86.110000</td>
      <td>59.035326</td>
      <td>79.630000</td>
      <td>61.100000</td>
      <td>67.60</td>
      <td>87.133465</td>
      <td>90.655000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>17.000000</td>
      <td>70.300000</td>
      <td>94.400000</td>
      <td>74.380000</td>
      <td>90.383888</td>
      <td>77.930000</td>
      <td>80.41</td>
      <td>94.630000</td>
      <td>95.900000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>18.561944</td>
      <td>87.500000</td>
      <td>97.200000</td>
      <td>86.760000</td>
      <td>100.660837</td>
      <td>93.292500</td>
      <td>93.47</td>
      <td>99.490000</td>
      <td>100.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>25.000000</td>
      <td>100.000000</td>
      <td>100.000000</td>
      <td>247.370000</td>
      <td>311.110000</td>
      <td>236.510000</td>
      <td>inf</td>
      <td>280.864197</td>
      <td>266.875000</td>
    </tr>
  </tbody>
</table>
</div>



Examining the correlation between ACLRSI and KOOS pain as they are both measures of mental readiness.


```{python}
# Looking at correlation between ACL RSI and KOOS Pain
plt.rcParams['font.family'] = 'Georgia'
sns.lmplot(x='acl_rsi', y='koos_pain', data=data, line_kws={'color': 'red'})
plt.title("Relationship between ACL_RSI \n and KOOS Pain")
plt.xlabel('ACL RSI')
plt.ylabel('KOOS Pain')
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.tick_params(axis='y', which='both',length=0)
plt.tick_params(axis='x', which='both',length=0)
plt.show()
```


        


We looked at the variables above to explore any relationships that could be helpful in assessing patients recovery. The findings in this exploration led us to pivot our question to focus on re-designing the report to help patients understand the data regarding their injury.
