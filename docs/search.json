[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DS 2023 Final Project",
    "section": "",
    "text": "Report\nFigure: Our updated clinical LEAP report showing assessment results after ACL reconstruction.",
    "crumbs": [
      "Report"
    ]
  },
  {
    "objectID": "index.html#prepared-for",
    "href": "index.html#prepared-for",
    "title": "DS 2023 Final Project",
    "section": "Prepared for",
    "text": "Prepared for\nUVA Orthopedic Center Therapy Services\nCharlottesville, VA",
    "crumbs": [
      "Report"
    ]
  },
  {
    "objectID": "index.html#problem-statement",
    "href": "index.html#problem-statement",
    "title": "DS 2023 Final Project",
    "section": "Problem Statement",
    "text": "Problem Statement\nIt is crucial that both patients and physicians are able to use and interpret a LEAP Report to track a patient’s ACLR recovery, though these interpretations are for very different purposes. Patients want to see where they stack up against other people in the recovery process and what time of progress they should be making at this point in recovery while physicians need to track specific details to tailor a recovery plan.\n Figure: Original clinical LEAP report showing assessment results after ACL reconstruction.\nAs shown above, patients may have a hard time digesting the current LEAP report as it is information dense and does not provide significant context or explanation of the functional and strength assessments and what they mean. The medical jargon included in the LEAP report that patients receive in their check up appointments following surgery may be meaningless and overwhelming for them.\nWhile revamping this report will provide clarity for patients, it is also critical to leave in certain features of the report that are necessary for accessibility, organization, and use by physicians. These features include name, date of birth, height, weight, age, the limb that surgery was performed on, and the dates of surgery and tests. Additionally, certain graphs that the LEAP report uses are vital for physicians, but could still be improved for readability and clarity for all parties involved.",
    "crumbs": [
      "Report"
    ]
  },
  {
    "objectID": "index.html#analysis",
    "href": "index.html#analysis",
    "title": "DS 2023 Final Project",
    "section": "Analysis",
    "text": "Analysis\nIn order to improve the patient-friendliness of the LEAP report while also preserving its functionality for physicians, we want to redesign the graphs and format of the LEAP report to include definitions of medical jargon or terms a patient may be unfamiliar with, eliminate unnecessary standards with no clinical evidence behind them, and plot the patient as an individual point in long term trend graphs to allow them to see where they are at in recovery and where they should aim to be by the next visit. \nA major improvement for the current graphs in the LEAP report is eliminating the meaningless standard of 90% and replacing it with an IQR range of all patients at that respective visit for that strength or functional assessment. This acts somewhat like a percentile chart as the patient can see if they fall within, below, or above the IQR range for that specific assessment. This simultaneously preserves physician functionality as it presents the same data, just in a more patient-friendly format. Additionally, the incorporation of graphs that display the mean value/score for major functional, physiological, and strength assessments in each “time since surgery” bucket allows a patient to see how they are doing compared to other people at this point in time, and where they should be looking to be by their next visit.\nThe original LEAP report did not offer any visualizations or data regarding long term recovery. Now, a patient’s data is plotted as a green or red dot (depending on whether they fall in the IQR range) against the trend lines, which lets them know where they stand in a digestible way. The overall aesthetic of the report was also improved, which strengthens its clarity and ability to effectively convey information to a patient.",
    "crumbs": [
      "Report"
    ]
  },
  {
    "objectID": "index.html#conclusion",
    "href": "index.html#conclusion",
    "title": "DS 2023 Final Project",
    "section": "Conclusion",
    "text": "Conclusion\nThe results of the functional, strength, and physiological assessments presented in a LEAP report are critical in determining whether a patient is ready to return to sport or physical activity. While the original LEAP report may have scored highly in terms of physician utility, its use of medical jargon, arbitrary benchmarks (e.g., 80%, 85%, 90%), lack of long-term data, and poor aesthetic design limited its effectiveness in communicating meaningful information to patients.\nDefining terms such as isokinetic, isometric, LSI, and RSI allows patients to better understand and interpret the graphs presented to them. LSI, or Limb Symmetry Index, refers to the functional symmetry between the injured limb and the uninjured limb. In ACL recovery, muscle imbalances and asymmetry are common due to weakness in the injured leg. A low LSI indicates that the patient is not yet ready to return to physical activity. RSI, or Return to Sport Index, is a psychological measure of a patient’s self-perceived readiness to return to sport. This metric is also important in assessing overall recovery. The updated LEAP report includes a graph showing the upward trend of RSI scores as time since surgery increases, offering greater context and insight than merely listing the patient’s current RSI score.\nThe improved report enables patients to better understand the data presented, compare their progress to others at similar recovery stages, and identify target milestones for their next visit. A report that fails to effectively communicate this critical information will be less helpful in guiding patients through their ACL recovery journey.\nLink to GitHub Repository: https://github.com/dqb5ee/final-project",
    "crumbs": [
      "Report"
    ]
  },
  {
    "objectID": "datacleaning.html",
    "href": "datacleaning.html",
    "title": "Data Cleaning",
    "section": "",
    "text": "This is simulated data on ACLR patients.\n\n### Import libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n### Load data\ndata = pd.read_csv('ACLR_data.csv')\ndata.head()\n\n\n\n\n\n\n\n\nrecord_id\nredcap_event_name\nsex_dashboard\ngraft_dashboard2\nmed_meniscus\nlat_meniscus\nlat_stab\nphysis\nvisit_sex\nvisit_graft\n...\nlsi_flex_mvic_60\nacl_ext_isok_60\ncon_ext_isok_60\nlsi_ext_isok_60\nacl_flex_isok_60\ncon_flex_isok_60\nlsi_flex_isok_60\nstrength_testing_complete\nrts\nrts_tss\n\n\n\n\n0\n1\nvisit_1_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nMale\nOther\n...\nNaN\n2.57\n2.92\n87.86\n1.50\n1.45\n103.32\n2.0\nNaN\nNaN\n\n\n1\n2\nvisit_1_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nFemale\nHS autograft\n...\nNaN\n0.97\n2.16\n45.00\n0.88\n1.20\n72.98\n2.0\nNaN\nNaN\n\n\n2\n2\nvisit_2_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nFemale\nHS autograft\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\nNaN\nNaN\n\n\n3\n2\nvisit_3_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nFemale\nHS autograft\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\nNaN\nNaN\n\n\n4\n3\nvisit_1_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nFemale\nHS autograft\n...\nNaN\n1.53\n1.88\n81.53\n0.93\n1.15\n81.11\n2.0\nNaN\nNaN\n\n\n\n\n5 rows × 60 columns\n\n\n\n\n### Calculating the percentage of non-null values for each column\nnon_null_percentage = (data.notnull().sum() / len(data)) * 100\n\n### Creating a horizontal barplot\nplt.figure(figsize=(10, 8))\nnon_null_percentage.sort_values().plot(kind='barh', color='skyblue')\nplt.title('Percentage of Non-Null Data for Each Variable')\nplt.xlabel('Percentage')\nplt.ylabel('Variable')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n### Dropping columns with more than 99% missing values\n\nnan_counts = data.isna().sum()\ndrop_list = []\n\nfor i in range (len(nan_counts)):\n    if nan_counts[i] / len(data) &gt; 0.99:\n        drop_list.append(nan_counts.index[i])\n        \ndata.drop(drop_list, axis=1, inplace=True)\n\n\n# Looking at age distribution\nplt.figure(figsize=(10, 5))\nplt.hist(data['age'], bins=20, color='blue', alpha=0.7, edgecolor='black')\nplt.title('Age Distribution')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\n\nText(0, 0.5, 'Frequency')\n\n\n\n\n\n\n\n\n\nWe are dropping patients over the age of 25 so that when we are comparing patients, the results are not skewed by very old patients who would have much longer recovery time.\n\ndata = data[data['age'] &lt;= 25]\n\n# Looking at age distribution again after filtering\nplt.figure(figsize=(10, 5))\nplt.hist(data['age'], bins=20, color='blue', alpha=0.7, edgecolor='black')\nplt.title('Age Distribution')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\n\nText(0, 0.5, 'Frequency')\n\n\n\n\n\n\n\n\n\n\ndata.head()\n\n\n\n\n\n\n\n\nrecord_id\nredcap_event_name\nvisit_sex\nvisit_graft\nage\nage_group\nage_group_dashboard\nage_group_dashboard_use\nheight_m\nmass_kg\n...\nacl_flex_mvic_60\ncon_flex_mvic_60\nlsi_flex_mvic_60\nacl_ext_isok_60\ncon_ext_isok_60\nlsi_ext_isok_60\nacl_flex_isok_60\ncon_flex_isok_60\nlsi_flex_isok_60\nstrength_testing_complete\n\n\n\n\n0\n1\nvisit_1_arm_1\nMale\nOther\n21.7\n5.0\n5.0\n21 to 25 years\n1.9\n87.4\n...\nNaN\nNaN\nNaN\n2.57\n2.92\n87.86\n1.50\n1.45\n103.32\n2.0\n\n\n1\n2\nvisit_1_arm_1\nFemale\nHS autograft\n14.5\n2.0\n2.0\n12 to 14 years\n1.6\n72.2\n...\nNaN\nNaN\nNaN\n0.97\n2.16\n45.00\n0.88\n1.20\n72.98\n2.0\n\n\n2\n2\nvisit_2_arm_1\nFemale\nHS autograft\n14.6\n2.0\n2.0\n12 to 14 years\n1.6\n50.3\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\n\n\n3\n2\nvisit_3_arm_1\nFemale\nHS autograft\n15.6\n3.0\n3.0\n15 to 17 years\n1.6\n50.3\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\n\n\n4\n3\nvisit_1_arm_1\nFemale\nHS autograft\n14.0\n2.0\n2.0\n12 to 14 years\n1.5\n61.3\n...\nNaN\nNaN\nNaN\n1.53\n1.88\n81.53\n0.93\n1.15\n81.11\n2.0\n\n\n\n\n5 rows × 52 columns\n\n\n\n\nWriting the data to a CSV file\n\n#data.to_csv('ACLR_data.csv', index=False)",
    "crumbs": [
      "Data Cleaning"
    ]
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "#import libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n### Load data\ndata = pd.read_csv('ACLR_data.csv')\ndata.head()\n\n\n\n\n\n\n\n\nrecord_id\nredcap_event_name\nsex_dashboard\ngraft_dashboard2\nmed_meniscus\nlat_meniscus\nlat_stab\nphysis\nvisit_sex\nvisit_graft\n...\nlsi_flex_mvic_60\nacl_ext_isok_60\ncon_ext_isok_60\nlsi_ext_isok_60\nacl_flex_isok_60\ncon_flex_isok_60\nlsi_flex_isok_60\nstrength_testing_complete\nrts\nrts_tss\n\n\n\n\n0\n1\nvisit_1_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nMale\nOther\n...\nNaN\n2.57\n2.92\n87.86\n1.50\n1.45\n103.32\n2.0\nNaN\nNaN\n\n\n1\n2\nvisit_1_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nFemale\nHS autograft\n...\nNaN\n0.97\n2.16\n45.00\n0.88\n1.20\n72.98\n2.0\nNaN\nNaN\n\n\n2\n2\nvisit_2_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nFemale\nHS autograft\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\nNaN\nNaN\n\n\n3\n2\nvisit_3_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nFemale\nHS autograft\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\nNaN\nNaN\n\n\n4\n3\nvisit_1_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nFemale\nHS autograft\n...\nNaN\n1.53\n1.88\n81.53\n0.93\n1.15\n81.11\n2.0\nNaN\nNaN\n\n\n\n\n5 rows × 60 columns\n\n\n\n\n\n\n\n\n\n\n\nrecord_id\n\n\nredcap_event_name\n\n\nsex_dashboard\n\n\ngraft_dashboard2\n\n\nmed_meniscus\n\n\nlat_meniscus\n\n\nlat_stab\n\n\nphysis\n\n\nvisit_sex\n\n\nvisit_graft\n\n\n…\n\n\nlsi_flex_mvic_60\n\n\nacl_ext_isok_60\n\n\ncon_ext_isok_60\n\n\nlsi_ext_isok_60\n\n\nacl_flex_isok_60\n\n\ncon_flex_isok_60\n\n\nlsi_flex_isok_60\n\n\nstrength_testing_complete\n\n\nrts\n\n\nrts_tss\n\n\n\n\n\n\n0\n\n\n1\n\n\nvisit_1_arm_1\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nMale\n\n\nOther\n\n\n…\n\n\nNaN\n\n\n2.57\n\n\n2.92\n\n\n87.86\n\n\n1.50\n\n\n1.45\n\n\n103.32\n\n\n2.0\n\n\nNaN\n\n\nNaN\n\n\n\n\n1\n\n\n2\n\n\nvisit_1_arm_1\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nFemale\n\n\nHS autograft\n\n\n…\n\n\nNaN\n\n\n0.97\n\n\n2.16\n\n\n45.00\n\n\n0.88\n\n\n1.20\n\n\n72.98\n\n\n2.0\n\n\nNaN\n\n\nNaN\n\n\n\n\n2\n\n\n2\n\n\nvisit_2_arm_1\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nFemale\n\n\nHS autograft\n\n\n…\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n0.0\n\n\nNaN\n\n\nNaN\n\n\n\n\n3\n\n\n2\n\n\nvisit_3_arm_1\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nFemale\n\n\nHS autograft\n\n\n…\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n0.0\n\n\nNaN\n\n\nNaN\n\n\n\n\n4\n\n\n3\n\n\nvisit_1_arm_1\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nFemale\n\n\nHS autograft\n\n\n…\n\n\nNaN\n\n\n1.53\n\n\n1.88\n\n\n81.53\n\n\n0.93\n\n\n1.15\n\n\n81.11\n\n\n2.0\n\n\nNaN\n\n\nNaN\n\n\n\n\n\n5 rows × 60 columns\n\n\n\n#Age Histogram after dropping individuals over the age of 25\nplt.hist(data['age'], bins = 15)\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.title('Age of Individuals Distribution')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both',length=0)\n\n# Saving the graph\nplt.show()\n\n\n\n\n\n\n\n\n\n#Histogram of ACL RSI for Patients\nplt.hist(data['acl_rsi'], bins = 10)\nplt.xlabel('ACL RSI')\nplt.ylabel('Count')\nplt.title('ACL RSI Distribution for Patients')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both',length=0)\n\n# Saving the graph\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.scatter(data['age'], data['ikdc'])\nplt.xlabel('Age')\nplt.ylabel('IKDC')\nplt.title('Is IKDC Correlated to the Age of the Patient?')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both',length=0)\n\n# Saving the graph\nplt.show()\n\n\n\n\n\n\n\n\n\n#Calculating correlation coefficient between age and ikdc\ncorrelation_coefficient = data[['age', 'ikdc']].corr().iloc[0,1]\nprint(correlation_coefficient)\n#Not close to negative 1, indicating there is not a strong correlation.\n\n-0.17753340913066276\n\n\n-0.17753340913066273\n\nplt.scatter(data['age'], data['acl_rsi'])\nplt.xlabel('Age')\nplt.ylabel('ACL RSI')\nplt.title('Is ACL RSI Correlated to the Age of the Patient?')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both',length=0)\n\n# Saving the graph\nplt.show()\n\n\n\n\n\n\n\n\n\ncorrelation_coefficient2 = data[['age', 'acl_rsi']].corr().iloc[0,1]\nprint(correlation_coefficient2)\n#Correlation is still not super strong\n\n-0.1664060653262176\n\n\n-0.16640606532621763\n\nplt.hist(data['tss_dashboard'], bins = 4)\nplt.xlabel('Time Since Surgery Group')\nplt.ylabel('Count')\nplt.title('Time Since Surgery Distribution')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.xticks([0, 1, 2, 3], ['0-3 months', '4-6 months', '7-12 months', '1+ years'])\nplt.tick_params(axis='y', which='both',length=0)\n# Saving the graph\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.hist(data['lsi_ext_isok_60'])\nplt.xlabel('LSI For Isokinetic Knee Extension')\nplt.ylabel('Count')\nplt.title('LSI for Isokinetic Knee Extension Distribution')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both',length=0)\n\n# Saving the graph\nplt.show()\n\n\n\n\n\n\n\n\n\nlsi_ext_isok_60_mean = np.mean(data['lsi_ext_isok_60'])\nprint(lsi_ext_isok_60_mean, '%')\n\n73.83709135616758 %\n\n\n73.83709135616758 %\n\n#Peak Torque recorded and normalized to body mass\nplt.hist(data['acl_flex_isok_60'])\nplt.xlabel('ACLR Isokinetic Flexion Torque')\nplt.ylabel('Count')\nplt.title('ACLR Isokinetic Flexion Torque Distribution')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both',length=0)\n\n# Saving the graph\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.scatter(data['bmi'], data['sh_lsi'])\nplt.xlabel('BMI')\nplt.ylabel('Single Hop LSI')\nplt.title('Correlation between Single Hop LSI and BMI')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both',length=0)\n\n# Saving the graph\nplt.show()\n\n\n\n\n\n\n\n\n\n# Histogram of Single Hop LSI\nplt.hist(data['sh_lsi'])\nplt.xlabel('Single Hop LSI')\nplt.ylabel('Count')\nplt.title('Single Hop LSI Distribution')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both',length=0)\nplt.xlim(20, 150)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n# Histogram of Triple Hop LSI\nplt.hist(data['th_lsi'])\nplt.xlabel('Triple Hop LSI')\nplt.ylabel('Count')\nplt.title('Triple Hop LSI Distribution')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.xlim(20, 150)\nplt.tick_params(axis='y', which='both',length=0)\n\nplt.show()\n\n\n\n\n\n\n\n\n\ngreen_mask = data['sh_lsi'] &gt; 85\n\n\nplt.scatter(data['tss_dashboard'][~green_mask], data['sh_lsi'][~green_mask], color='blue', label='sh_lsi &lt;= 85')\n\nplt.scatter(data['tss_dashboard'][green_mask], data['sh_lsi'][green_mask], color='green', label='sh_lsi &gt; 85')\n\n\nplt.xlabel('Time Since Surgery Groups')\nplt.ylabel('Single Hop LSI')\nplt.title('Any Correlation between Single Hop LSI and Time Since Surgery?')\n\n\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\n\n\nplt.tick_params(axis='y', which='both', length=0)\n\n\nplt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='LSI Conditions')\n\n# Saving the graph\nplt.show()\n\n\n\n\n\n\n\n\nPatients are usually cleared for return to sports after an ACL surgery from 5-12 months. Lets look at their mental readiness (acl_rsi) at these times:\n\ngroup_5_7_months = data[data['tss_dashboard'] == '5 to 7 months']\ngroup_8_12_months = data[data['tss_dashboard'] == '8 to 12 months']\n\nplt.figure(figsize=(10, 6))\n\nsns.kdeplot(group_5_7_months['acl_rsi'], label='5 to 7 months', fill=True, color='blue')\nsns.kdeplot(group_8_12_months['acl_rsi'], label='8 to 12 months', fill=True, color='green')\n\nplt.xlabel('ACL RSI')\nplt.ylabel('Density')\nplt.title('Distribution of ACL RSI Scores for Groups 5 to 7 Months and 8 to 12 Months')\n\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\n\nplt.tick_params(axis='y', which='both', length=0)\n\n\nplt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Time Since Surgery')\n\n# Saving the graph\nplt.show()\n\n\n\n\n\n\n\n\n\ncounts = data['visit_graft'].value_counts()\nplt.bar(counts.index, counts.values)\nplt.xlabel('Graft Type at Visit')\nplt.ylabel('Count')\nplt.title('Type of Graft Distribution')\nax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both', length=0)\nplt.xticks(rotation=45, ha='right')\n\n# Saving the graph\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nBTB and HS autograft appears to be the most common graph types used. We want to examine them further:\n\nbtb_data = data[data['visit_graft'] == 'BTB autograft']\nhs_data = data[data['visit_graft'] == 'HS autograft']\nplt.figure(figsize=(10, 6))\n\nsns.kdeplot(btb_data['acl_rsi'], label='BTB Graft', fill=True, color='blue', alpha=0.6)\nsns.kdeplot(hs_data['acl_rsi'], label='HS Graft', fill=True, color='green', alpha=0.6)\n\n\nplt.xlabel('ACL RSI')\nplt.ylabel('Density')\nplt.title('Distribution of ACL RSI for BTB Graft vs HS Graft')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both',length=0)\n\nplt.legend()\n\n# Saving the graph\nplt.show()\n\n\n\n\n\n\n\n\n\n# Looking further at the means of ACL RSI for BTB and HS grafts\nmean_btb = np.mean(btb_data['acl_rsi'])\nmean_hs = np.mean(hs_data['acl_rsi'])\nprint('Mean ACL RSI for BTB: ', mean_btb, '\\nMean ACL RSI for HS: ', mean_hs)\n\nMean ACL RSI for BTB:  66.71625423728814 \nMean ACL RSI for HS:  69.58213018867924\n\n\nMean ACL RSI for BTB:  66.71625423728814 \nMean ACL RSI for HS:  69.58213018867924\n\nplt.hist(data['redcap_event_name'], bins = 5)\nplt.xlabel('Event Name')\nplt.ylabel('Count')\nplt.title('Event Distribution')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.xticks(rotation=45, ha='right')\nplt.tick_params(axis='y', which='both',length=0)\n\n# Saving the graph\nplt.show()\n\n\n\n\n\n\n\n\nMost of the patients only have data for their first 1-2 visits.\n\nhelpful_data_clean = data.dropna(subset=['acl_rsi'])\n\nplt.figure(figsize=(12, 8))\n\n\nsns.kdeplot(data=helpful_data_clean, x='acl_rsi', hue='redcap_event_name', fill=True, common_norm=False, warn_singular=False)\n\n\nplt.xlabel('ACL RSI')\nplt.ylabel('Density')\nplt.title('ACL RSI Distribution at Each Visit')\n\n\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both', length=0)\n\n# Saving the graph\nplt.show()\n\n\n\n\n\n\n\n\nLooking at patients return ACL_RSI at different times since their surgery.\n\naverage_acl_rsi_per_visit = data.groupby('tss_dashboard')['acl_rsi'].mean()\nprint('Mean ACL RSI at Visit:', average_acl_rsi_per_visit)\niqr_per_time = {}\nfor time in average_acl_rsi_per_visit.index:\n    time_data = data[data['tss_dashboard'] == time]['acl_rsi'].dropna()\n    q1 = time_data.quantile(0.25)\n    q3 = time_data.quantile(0.75)\n    iqr_per_time[time] = q3 - q1\n\nprint(\"IQR for each time period:\", iqr_per_time)\nq1_acl_rsi = data['acl_rsi'].quantile(0.25)\nq3_acl_rsi = data['acl_rsi'].quantile(0.75)\niqr_acl_rsi = q3_acl_rsi - q1_acl_rsi\nprint(f\"IQR for ACL RSI: {iqr_acl_rsi}\")\n\nMean ACL RSI at Visit: tss_dashboard\n13 to 24 months    67.849391\n3 to 4 months      57.920182\n5 to 7 months      70.263743\n8 to 12 months     76.423492\nNot Reported       60.345864\nPreoperative             NaN\nName: acl_rsi, dtype: float64\nIQR for each time period: {'13 to 24 months': 37.285, '3 to 4 months': 35.0, '5 to 7 months': 33.3, '8 to 12 months': 31.975, 'Not Reported': 37.7225, 'Preoperative': nan}\nIQR for ACL RSI: 36.67\n\n\nMean ACL RSI at Visit: tss_dashboard\n13 to 24 months    67.849391\n3 to 4 months      57.920182\n5 to 7 months      70.263743\n8 to 12 months     76.423492\nNot Reported       60.345864\nPreoperative             NaN\nName: acl_rsi, dtype: float64\nIQR for each time period: {'13 to 24 months': 37.285, '3 to 4 months': 35.0, '5 to 7 months': 33.3, '8 to 12 months': 31.975, 'Not Reported': 37.7225, 'Preoperative': nan}\nIQR for ACL RSI: 36.67\nLooking at the correlation matrix of some variables we plan to use in our report:\n\nimportant_data = data[['age', 'acl_rsi', 'koos_pain', 'lsi_ext_isok_60', 'lsi_flex_isok_60', 'lsi_ext_mvic_60', 'lsi_flex_mvic_60', 'sh_lsi', 'th_lsi']]\ncorrelation_matrix = important_data.corr()\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', cbar=True, square=True, linewidths=0.5, linecolor='black')\nplt.figure(figsize=(12, 8))\nplt.show()\n\n\n\n\n\n\n\n\n&lt;Figure size 1152x768 with 0 Axes&gt;\n\n\n\n# Looking at descriptive statistics for some of the variables we used in our report\npd.DataFrame(important_data.describe())\n\n\n\n\n\n\n\n\nage\nacl_rsi\nkoos_pain\nlsi_ext_isok_60\nlsi_flex_isok_60\nlsi_ext_mvic_60\nlsi_flex_mvic_60\nsh_lsi\nth_lsi\n\n\n\n\ncount\n4371.000000\n2886.000000\n2143.000000\n2017.000000\n2012.000000\n996.000000\n986.00\n2107.000000\n1343.000000\n\n\nmean\n17.306231\n67.352110\n91.402277\n73.837091\n90.162087\n77.873584\ninf\n92.673478\n94.635314\n\n\nstd\n2.633281\n23.539202\n9.606058\n22.203231\n18.787932\n26.995961\nNaN\n12.619013\n11.593727\n\n\nmin\n8.855556\n0.000000\n8.900000\n10.967185\n22.550000\n13.390000\n25.32\n34.170000\n0.220000\n\n\n25%\n15.680556\n50.830000\n86.110000\n59.035326\n79.630000\n61.100000\n67.60\n87.133465\n90.655000\n\n\n50%\n17.000000\n70.300000\n94.400000\n74.380000\n90.383888\n77.930000\n80.41\n94.630000\n95.900000\n\n\n75%\n18.561944\n87.500000\n97.200000\n86.760000\n100.660837\n93.292500\n93.47\n99.490000\n100.000000\n\n\nmax\n25.000000\n100.000000\n100.000000\n247.370000\n311.110000\n236.510000\ninf\n280.864197\n266.875000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nage\n\n\nacl_rsi\n\n\nkoos_pain\n\n\nlsi_ext_isok_60\n\n\nlsi_flex_isok_60\n\n\nlsi_ext_mvic_60\n\n\nlsi_flex_mvic_60\n\n\nsh_lsi\n\n\nth_lsi\n\n\n\n\n\n\ncount\n\n\n4371.000000\n\n\n2886.000000\n\n\n2143.000000\n\n\n2017.000000\n\n\n2012.000000\n\n\n996.000000\n\n\n986.00\n\n\n2107.000000\n\n\n1343.000000\n\n\n\n\nmean\n\n\n17.306231\n\n\n67.352110\n\n\n91.402277\n\n\n73.837091\n\n\n90.162087\n\n\n77.873584\n\n\ninf\n\n\n92.673478\n\n\n94.635314\n\n\n\n\nstd\n\n\n2.633281\n\n\n23.539202\n\n\n9.606058\n\n\n22.203231\n\n\n18.787932\n\n\n26.995961\n\n\nNaN\n\n\n12.619013\n\n\n11.593727\n\n\n\n\nmin\n\n\n8.855556\n\n\n0.000000\n\n\n8.900000\n\n\n10.967185\n\n\n22.550000\n\n\n13.390000\n\n\n25.32\n\n\n34.170000\n\n\n0.220000\n\n\n\n\n25%\n\n\n15.680556\n\n\n50.830000\n\n\n86.110000\n\n\n59.035326\n\n\n79.630000\n\n\n61.100000\n\n\n67.60\n\n\n87.133465\n\n\n90.655000\n\n\n\n\n50%\n\n\n17.000000\n\n\n70.300000\n\n\n94.400000\n\n\n74.380000\n\n\n90.383888\n\n\n77.930000\n\n\n80.41\n\n\n94.630000\n\n\n95.900000\n\n\n\n\n75%\n\n\n18.561944\n\n\n87.500000\n\n\n97.200000\n\n\n86.760000\n\n\n100.660837\n\n\n93.292500\n\n\n93.47\n\n\n99.490000\n\n\n100.000000\n\n\n\n\nmax\n\n\n25.000000\n\n\n100.000000\n\n\n100.000000\n\n\n247.370000\n\n\n311.110000\n\n\n236.510000\n\n\ninf\n\n\n280.864197\n\n\n266.875000\n\n\n\n\n\nExamining the correlation between ACLRSI and KOOS pain as they are both measures of mental readiness.\n\n# Looking at correlation between ACL RSI and KOOS Pain\nplt.rcParams['font.family'] = 'Georgia'\nsns.lmplot(x='acl_rsi', y='koos_pain', data=data, line_kws={'color': 'red'})\nplt.title(\"Relationship between ACL_RSI \\n and KOOS Pain\")\nplt.xlabel('ACL RSI')\nplt.ylabel('KOOS Pain')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.tick_params(axis='y', which='both',length=0)\nplt.tick_params(axis='x', which='both',length=0)\nplt.show()\n\n\n\n\n\n\n\n\nWe looked at the variables above to explore any relationships that could be helpful in assessing patients recovery. The findings in this exploration led us to pivot our question to focus on re-designing the report to help patients understand the data regarding their injury.",
    "crumbs": [
      "Exploratory Data Analysis"
    ]
  },
  {
    "objectID": "dataviz.html",
    "href": "dataviz.html",
    "title": "Data Visualizations",
    "section": "",
    "text": "#import libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import rcParams\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n#Load in cleaned data\ndata = pd.read_csv('./ACLR_data.csv')\n\n\n#Getting an interest patient for example chart\ninterest_patient = data[data['record_id'] == 1473]\n\n\ninterest_patient.head()\nprint(interest_patient['lsi_ext_mvic_60'])\n\n2058    53.78\n2059    68.81\n2060    70.27\nName: lsi_ext_mvic_60, dtype: float64\n\n\n2058    53.78\n2059    68.81\n2060    70.27\nName: lsi_ext_mvic_60, dtype: float64\n\naverage_acl_rsi_per_visit = data.groupby('tss_dashboard')['acl_rsi'].mean()\nprint('Mean ACL RSI at Visit:', average_acl_rsi_per_visit)\niqr_per_time = {}\nfor time in average_acl_rsi_per_visit.index:\n    time_data = data[data['tss_dashboard'] == time]['acl_rsi'].dropna()\n    q1 = time_data.quantile(0.25)\n    q3 = time_data.quantile(0.75)\n    iqr_per_time[time] = q3 - q1\n\nprint(\"IQR for each time period:\", iqr_per_time)\nq1_acl_rsi = data['acl_rsi'].quantile(0.25)\nq3_acl_rsi = data['acl_rsi'].quantile(0.75)\niqr_acl_rsi = q3_acl_rsi - q1_acl_rsi\nprint(f\"IQR for ACL RSI: {iqr_acl_rsi}\")\n\nMean ACL RSI at Visit: tss_dashboard\n13 to 24 months    67.849391\n3 to 4 months      57.920182\n5 to 7 months      70.263743\n8 to 12 months     76.423492\nNot Reported       60.345864\nPreoperative             NaN\nName: acl_rsi, dtype: float64\nIQR for each time period: {'13 to 24 months': 37.285, '3 to 4 months': 35.0, '5 to 7 months': 33.3, '8 to 12 months': 31.975, 'Not Reported': 37.7225, 'Preoperative': nan}\nIQR for ACL RSI: 36.67\n\n\nMean ACL RSI at Visit: tss_dashboard\n13 to 24 months    67.849391\n3 to 4 months      57.920182\n5 to 7 months      70.263743\n8 to 12 months     76.423492\nNot Reported       60.345864\nPreoperative             NaN\nName: acl_rsi, dtype: float64\nIQR for each time period: {'13 to 24 months': 37.285, '3 to 4 months': 35.0, '5 to 7 months': 33.3, '8 to 12 months': 31.975, 'Not Reported': 37.7225, 'Preoperative': nan}\nIQR for ACL RSI: 36.67\n\n#Set font and font size\nrcParams['font.family'] = 'Times New Roman'\nrcParams['font.size'] = 22  \n\n#Data (calculated above)\nrsi_means = [57.920182, 70.263743, 76.423492]\ntss_dashboard = ['3-4 months', '5-7 months', '8-12 months']\niqr_values = [35.0, 33.3, 31.975]\n\n#Creating figure\nplt.figure(figsize=(8, 8))\n\n#Calculating the upper and lower bounds for shading\nupper_bounds = [mean + iqr / 2 for mean, iqr in zip(rsi_means, iqr_values)]\nlower_bounds = [mean - iqr / 2 for mean, iqr in zip(rsi_means, iqr_values)]\n\n#Shade the IQR regions to show the patient where they are + where they should be aiming to be\nplt.fill_between(tss_dashboard, lower_bounds, upper_bounds, color='green', alpha=0.2, label='IQR')\n\n#Plotting RSI means\nplt.plot(\n    tss_dashboard,\n    rsi_means,\n    marker='o',\n    markersize=10,\n    linestyle='-',\n    linewidth=2,\n    color=(65/255, 105/255, 225/255, 0.5)\n)\n\n#Annotating and labeling each point that shows the mean RSI score for patient's overtime\nfor tss, th in zip(tss_dashboard, rsi_means):\n    plt.text(tss, th + 1.5, f'{th:.1f}', ha='center', fontsize=20)\n\n#Point with patient's RSI score at this visit in correct time bin\nplt.scatter('5-7 months', 60.8, color=('green'), s=100, zorder=5) #Dot is green because it is in RSI range\nplt.text('5-7 months', 60.8 + 1.5, '60.8', color='black', ha='center', fontsize=20) #Label the point\n\n\nax = plt.gca() #Styling\nax.set_ylim(20, 100) #Y-limit\nax.set_yticks(range(20, 101, 20))\nplt.title('RSI Score Progression') #Graph Title\nplt.xlabel('Time Since Surgery') #X-axis label\nplt.ylabel('RSI Score (Mean)') #Y-axis Label\nax.spines['top'].set_visible(False) #Get rid of top spine of graph\nax.spines['right'].set_visible(False) #Get rid of top spine of graph\nax.tick_params(axis='x', rotation=0, length=0) #Get rid of x-axis ticks\n\n# Saving the graph\nplt.savefig('RSI_Score_Progression.png', dpi=300, bbox_inches='tight')\n\nplt.tight_layout()\nplt.show() #Display Graph\n\n\n\n\n\n\n\n\n\nvisit1_data = data[data['redcap_event_name'] == 'visit_1_arm_1'] #New Dataset for only Visit 1 Data\n\n\nvisit2_data = data[data['redcap_event_name'] == 'visit_2_arm_1'] #New Dataset for only Visit 2 Data\n\nThe below code chunks calculate IQR for the Isokinetic LSI graph.\n\nq1 = visit2_data['lsi_ext_isok_60'].quantile(0.25)\nq3 = visit2_data['lsi_ext_isok_60'].quantile(0.75)\niqr = q3 - q1\nprint(q1)\nprint(q3)\nprint(iqr)\n\n65.38\n91.4\n26.02000000000001\n\n\n65.38\n91.4\n26.02000000000001\n\nq21 = visit2_data['lsi_flex_isok_60'].quantile(0.25)\nq23 = visit2_data['lsi_flex_isok_60'].quantile(0.75)\niqr2 = q23 - q21\nprint(q21)\nprint(q23)\nprint(iqr2)\n\n80.9320467425\n101.671707325\n20.739660582499994\n\n\n80.9320467425\n101.671707325\n20.739660582499994\n\ninterest_patient['lsi_flex_mvic_60'].value_counts() #getting values to graph for patient of interest (we are focusing on visit2)\n\nlsi_flex_mvic_60\n61.54    1\n76.74    1\n89.58    1\nName: count, dtype: int64\n\n\nlsi_flex_mvic_60\n61.54    1\n76.74    1\n89.58    1\nName: count, dtype: int64\n\ninterest_patient['lsi_ext_mvic_60'].value_counts() #getting values to graph for patient of interest (we are focusing on visit2)\n\nlsi_ext_mvic_60\n53.78    1\n68.81    1\n70.27    1\nName: count, dtype: int64\n\n\nlsi_ext_mvic_60\n53.78    1\n68.81    1\n70.27    1\nName: count, dtype: int64\n\nx_axis = ['Running', 'Squatting', 'Landing', 'Bilateral Jump'] #Labels for x-axis\nscores = [89.4, 76.8, 44.3, 68.3] #Values to plot for the bars\n\n#Individually assigning each activity to a variable to make the bars different colors\nperson1 = ['Running']\nperson2 = ['Squatting']\nperson3 = ['Landing']\nperson4 = ['Bilateral Jump']\n\n#Setting the font\nplt.rc('font', family='Times New Roman')\n\n#Creating the figure\nfig, ax = plt.subplots(figsize=(10, 6))\n\n#Coloring the bars separately (imitating original LEAP report)\ncolors = []\nfor label in x_axis:\n    if any(h in label for h in person1):\n        colors.append('#004AAD')\n    elif any(h in label for h in person2):\n        colors.append('#F67B2F')\n    elif any(h in label for h in person3):\n        colors.append('#F03F36')\n    else:\n        colors.append('#8680C4')\n\n#Create bars and label with their respective activity names\nbars = ax.bar(x_axis, scores, color=colors, alpha=0.5)\n\n#Add value labels on top of each bar\nfor bar in bars:\n    height = bar.get_height()\n    ax.text(\n        bar.get_x() + bar.get_width() / 2,\n        height + 1.5,\n        f'{height:.1f}',\n        ha='center',\n        va='bottom',\n        fontsize=22\n    )\n\n\nax.set_ylim(0, 100) #Y-limit to 100 (different from LEAP report; ideal symmetry between injured and uninjured limbs would be 100%)\nax.set_title('Biomechanics Symmetry', fontsize=22) #Figure Title\nax.set_ylabel('% Contralateral', fontsize=22) #Y-axis label \nax.spines['top'].set_visible(False) #Get rid of top spine of graph\nax.spines['right'].set_visible(False) #Get rid of right spine of graph\nax.tick_params(axis='x', rotation=0, length=0) #Get rid fo x-axis ticks\nax.set_xticklabels(x_axis, fontsize=22) #Increase size of x-xis labels\nax.axhline(40, color='#64A846', linestyle='--', linewidth=1.5, alpha=0.5) #Graph horizontal, green dashed lines at these values (imitating LEAP report)\nax.axhline(80, color='#64A846', linestyle='--', linewidth=1.5, alpha=0.5)\nax.set_yticks([0, 40, 80, 120]) #Setting y-ticks and labels only for these values (imitating original LEAP report)\nax.set_yticklabels([0, 40, 80, 120], fontsize=12)\n\n# Saving the graph\nplt.savefig('Biomechanics_Symmetry.png', dpi=300, bbox_inches='tight')\n\nplt.tight_layout()\nplt.show() #Display graph\n\n\n\n\n\n\n\n\n\nlabels_mvic = ['Hamstring Strength (60 °/s)'] #First subplot label\nlabels_isok = ['Quad Strength (60 °/s)'] #Second subplot label\nscores_ham = [68.75] #LSI patient value for hamstring strength (Isokinetic)\nscores_quad = [93.10] #LSI patient value for quadricep strength (Isokinetic)\n\n#Define IQR bounds (calculated above)\nq1, q3 = 61.9, 89.8      \nq21, q23 = 84.7, 104.4    \n\n#Setting font\nplt.rc('font', family='Times New Roman')\n\n#Creating figure with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6), sharey=True)\n\nax1.bar(labels_mvic, scores_ham, color='#F67B2F', alpha=0.5) #Plotting the patient's lsi_flex_isok_60 as an orange bar\nax1.axhspan(q1, q3, color='#64A846', alpha=0.4)  #Shading the IQR in a light green color\nax1.text(0, scores_ham[0] + 2, f'{scores_ham[0]:.1f}', ha='center', fontsize=22)\n\nax1.set_ylabel('% Contralateral', fontsize=22) #Setting y-axis label \nax1.set_ylim(0, 120)  #Y-limit to 120 to imitate the original LEAP report\nax1.tick_params(axis='x', length=0) #Get rid of x-axis tick marks\nax1.spines['top'].set_visible(False) #Get rid of top spine of graph\nax1.spines['right'].set_visible(False) #Get rid of right spine of graph\nax1.set_xticklabels(labels_mvic, fontsize=22) #Label the bar\n\n\nax2.bar(labels_isok, scores_quad, color='#004AAD', alpha=0.5) #Plotting the patient's lsi_ext_isok_60 as a blue bar\nax2.axhspan(q21, q23, color='#64A846', alpha=0.4)  #Shading the IQR in a light green color\nax2.text(0, scores_quad[0] + 2, f'{scores_quad[0]:.1f}', ha='center', fontsize=22)\n\nax2.set_ylim(0, 120)  #Y-limit to 120 to imitate the original LEAP report\nax2.tick_params(axis='x', length=0) #Get rid of x-axis tick marks\nax2.spines['top'].set_visible(False) #Get rid of top spine of graph\nax2.spines['right'].set_visible(False) #Get rid of right spine of graph\nax2.tick_params(axis='y', length=0) #Get rid of y-axis tick marks (only keeping them for the first subplot)\nax2.set_xticklabels(labels_isok, fontsize=22) #Label the bar\n\n##Only having ticks and labels on the y-axis for these values (imitating original LEAP report)\nfor ax in [ax1, ax2]:\n    ax.set_yticks([0, 40, 80, 120])\n    ax.set_yticklabels([0, 40, 80, 120], fontsize=22)\n\n#Overall Graph Title\nfig.suptitle('Quadriceps and Hamstrings Strength at 60 °/s (Nm/kg): Isokinetic', fontsize=22)\nplt.tight_layout(rect=[0, 0, 1, 0.95])\n\n# Saving the graph\nplt.savefig('Strength_Comparison.png', dpi=300, bbox_inches='tight')\n\nplt.show() #Display the graph\n\n\n\n\n\n\n\n\nThe below code chunks calculate IQR for the Isometric LSI graph.\n\nq_1 = visit2_data['lsi_ext_mvic_60'].quantile(0.25)\nq_3 = visit2_data['lsi_ext_mvic_60'].quantile(0.75)\niqr_1 = q_3 - q_1\nprint(q_1)\nprint(q_3)\nprint(iqr_1)\n\n77.27\n100.0\n22.730000000000004\n\n\n77.27\n100.0\n22.730000000000004\n\nq_12 = visit2_data['lsi_flex_mvic_60'].quantile(0.25)\nq_32 = visit2_data['lsi_flex_mvic_60'].quantile(0.75)\niqr_2 = q_32 - q_12\nprint(q_12)\nprint(q_32)\nprint(iqr_2)\n\n76.065\n99.255\n23.189999999999998\n\n\n76.065\n99.255\n23.189999999999998\n\ninterest_patient['lsi_flex_mvic_60'].value_counts()\n\nlsi_flex_mvic_60\n61.54    1\n76.74    1\n89.58    1\nName: count, dtype: int64\n\n\nlsi_flex_mvic_60\n61.54    1\n76.74    1\n89.58    1\nName: count, dtype: int64\n\ninterest_patient['lsi_ext_mvic_60'].value_counts()\n\nlsi_ext_mvic_60\n53.78    1\n68.81    1\n70.27    1\nName: count, dtype: int64\n\n\nlsi_ext_mvic_60\n53.78    1\n68.81    1\n70.27    1\nName: count, dtype: int64\n\nlabels_mvic = ['Hamstring Strength (60 °/s)'] #First subplot label\nlabels_isok = ['Quad Strength (60 °/s)'] #Second subplot label\nscores_ham = [76.74] #LSI patient value for hamstring strength (Isometric)\nscores_quad = [68.81] #LSI patient value for quadricept strength (Isometric)\n\n#Define IQR bounds\n#q1, q3 = visit2_data['lsi_flex_mvic_60'].quantile(0.25), visit2_data['lsi_flex_mvic_60'].quantile(0.75)  #Hamstring IQR\n#q21, q23 = visit2_data['lsi_ext_mvic_60'].quantile(0.25), visit2_data['lsi_ext_mvic_60'].quantile(0.75)  #Quadriceps IQR\n\n#Set font\nplt.rc('font', family='Times New Roman')\n\n#Create figure with 2 subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6), sharey=True)\n\nax1.bar(labels_mvic, scores_ham, color='#F67B2F', alpha=0.5) #Plotting the patient's lsi_flex_mvic_60 as an orange bar\nax1.axhspan(q_1, q_3, color='#64A846', alpha=0.4)  #Shading the IQR in a light green color\nax1.text(0, scores_ham[0] + 2, f'{scores_ham[0]:.1f}', ha='center', fontsize=16) #Labeling bar with value\n\nax1.set_ylabel('% Contralateral', fontsize=22) #Setting y-axis label \nax1.set_ylim(0, 120) #Y-limit to 120 to imitate the original LEAP report\nax1.tick_params(axis='x', length=0) #Get rid of x-axis tick marks\nax1.spines['top'].set_visible(False) #Get rid of top spine of graph\nax1.spines['right'].set_visible(False) #Get rid of right spine of graph\nax1.set_xticklabels(labels_mvic, fontsize=22) #Label the bar\n\n\nax2.bar(labels_isok, scores_quad, color='#004AAD', alpha=0.5)\nax2.axhspan(q_12, q_32, color='#64A846', alpha=0.4)  ##Shading the IQR in a light green color\nax2.text(0, scores_quad[0] + 2, f'{scores_quad[0]:.1f}', ha='center', fontsize=16)\n\nax2.set_ylim(0, 120) #Y-limit to 120 to imitate the original LEAP report\nax2.tick_params(axis='x', length=0) #Get rid of x-axis tick marks\nax2.spines['top'].set_visible(False) #Get rid of top spine of graph\nax2.spines['right'].set_visible(False) #Get rid of right spine of graph\nax2.tick_params(axis='y', length=0) #Get rid of y-axis tick marks(only having ticks on first subplot)\nax2.set_xticklabels(labels_isok, fontsize=22) #Label the bar\n\n#Only setting y-ticks and labels for these values on both subplots\nfor ax in [ax1, ax2]:\n    ax.set_yticks([0, 40, 80, 120])\n    ax.set_yticklabels([0, 40, 80, 120], fontsize=22)\n\n#Overall Graph Title\nfig.suptitle('Quadriceps and Hamstrings Strength at 60 °/s (Nm/kg): Isometric', fontsize=22)\nplt.tight_layout(rect=[0, 0, 1, 0.95])\n\n# Saving the graph\nplt.savefig('Strength_Comparison.png', dpi=300, bbox_inches='tight')\nplt.show() #Display the graph\n\n\n\n\n\n\n\n\n\npeople = ['Single Hop LSI', 'Triple Hop LSI'] #Different bar labels for each subplot\nscores = [89.0, 77.0] #Patient LSI for SH and TH \n\n#Assigning to diff. variables to color differently\nhighlight_person1 = ['Single Hop LSI'] \nhighlight_person2 = ['Triple Hop LSI']\n\n#Calculating IQRs (assumes visit2_data is already defined)\nsh_q1 = visit2_data['sh_lsi'].quantile(0.25)\nsh_q3 = visit2_data['sh_lsi'].quantile(0.75)\nth_q1 = visit2_data['th_lsi'].quantile(0.25)\nth_q3 = visit2_data['th_lsi'].quantile(0.75)\n\n# Setting font\nplt.rc('font', family='Times New Roman')\n\n#Creating figure with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6), sharey=True)\n\n#First subplot\ncolors1 = ['#F67B2F' if p in highlight_person1 else 'gray' for p in people[:1]]\nax1.bar(people[:1], scores[:1], color=colors1, alpha=0.5) #Plotting the patient's SH LSI as an orange bar\nax1.axhspan(sh_q1, sh_q3, color='#64A846', alpha=0.4) #Shading the IQR in a light green color\nax1.text(0, scores[0] + 2, f'{scores[0]:.1f}', ha='center', fontsize=22) \n\nax1.set_ylabel('% Contralateral', fontsize=22) #Y-axis label\nax1.set_xticklabels(highlight_person1, fontsize=22) #Label the bar\nax1.set_ylim(0, 120) #Y-limit to 120 to imitate the original LEAP report\nax1.tick_params(axis='x', rotation=0, length=0) #Get rid of x-axis tick marks\nax1.tick_params(axis='y', length=0) #Get rid of y-axis tick marks\nax1.spines['top'].set_visible(False) #Get rid of top spine of graph\nax1.spines['right'].set_visible(False) #Get rid of right spine of graph\nax1.grid(False) #No grid lines\n\n#Second subplot\ncolors2 = ['#F67B2F' if p in highlight_person2 else 'gray' for p in people[1:]] \nax2.bar(people[1:], scores[1:], color=colors2, alpha=0.5) #Plotting the patient's TH LSI as an orange bar\nax2.axhspan(th_q1, th_q3, color='#64A846', alpha=0.4) #Shading the IQR in a light green color\nax2.text(0, scores[1] + 2, f'{scores[1]:.1f}', ha='center', fontsize=22)\n\nax2.set_xticklabels(highlight_person2, fontsize=22) #Label the bar\nax2.set_ylim(0, 120) #Y-limit to 120 to imitate the original LEAP report\nax2.tick_params(axis='x', rotation=0, length=0)\nax2.tick_params(axis='y', length=0) #Get rid of y-axis tick marks\nax2.spines['top'].set_visible(False) #Get rid of top spine of graph\nax2.spines['right'].set_visible(False) #Get rid of right spine of graph\nax2.grid(False) #No grid lines\n\n#Only setting y-ticks and labels for these values on both subplots\nfor ax in [ax1, ax2]:\n    ax.set_yticks([0, 40, 80, 120])\n    ax.set_yticklabels([0, 40, 80, 120], fontsize=22)\n\n#Overall graph title\nfig.suptitle('Single Limb Hop Tests', fontsize=22)\n\nplt.tight_layout(rect=[0, 0, 1, 0.95])\n\n# Saving the graph\nplt.savefig('Single_Limb_Hop_Tests.png', dpi=300, bbox_inches='tight')\nplt.show() #Display graph\n\n\n\n\n\n\n\n\n\ndata['tss_dashboard'].value_counts()\n\ntss_dashboard\n5 to 7 months      2021\n3 to 4 months       948\n8 to 12 months      869\nNot Reported        311\n13 to 24 months     192\nPreoperative         30\nName: count, dtype: int64\n\n\ntss_dashboard\n5 to 7 months      2021\n3 to 4 months       948\n8 to 12 months      869\nNot Reported        311\n13 to 24 months     192\nPreoperative         30\nName: count, dtype: int64\n\n#Creating groups for TSS for long term graphs\ngroup1 = data[data['tss_dashboard'] == '3 to 4 months']\ngroup2 = data[data['tss_dashboard'] == '5 to 7 months']\ngroup3 = data[data['tss_dashboard'] == '8 to 12 months']\n\nBelow code chunks are math for the long term graphs for quad strength LSI (isokinetic), TH LSI, and SH LSI.\n\naclext1 = group1['acl_ext_isok_60'].quantile(.25)\naclext3 = group1['acl_ext_isok_60'].quantile(.75)\nconext1 = group1['con_ext_isok_60'].quantile(.25)\nconext3 = group1['con_ext_isok_60'].quantile(.75)\naclflex1 = group1['acl_flex_isok_60'].quantile(.25)\naclflex3 = group1['acl_flex_isok_60'].quantile(.75)\nconflex1  = group1['con_flex_isok_60'].quantile(.25)\nconflex3  = group1['con_flex_isok_60'].quantile(.75)\nth1 = group1['th_lsi'].quantile(.25)\nth3 = group1['th_lsi'].quantile(.75)\nsh1 = group1['sh_lsi'].quantile(.25)\nsh3 = group1['sh_lsi'].quantile(.75)\n\n\nthg1 = group1['th_lsi'].mean()\nthg2 = group2['th_lsi'].mean()\nthg3 = group3['th_lsi'].mean()\nprint(thg1)\nprint(thg2)\nprint(thg3)\nth_iqr1 = th3 - th1\nth_iqr2 = thg2 - thg1\nth_iqr3 = thg3 - thg2\n\nprint(f\"IQR for THG Group 1: {th_iqr1}\")\nprint(f\"IQR for THG Group 2: {th_iqr2}\")\nprint(f\"IQR for THG Group 3: {th_iqr3}\")\n\n92.11706953\n93.59774779210657\n96.57852704372314\nIQR for THG Group 1: 8.317282607500005\nIQR for THG Group 2: 1.4806782621065793\nIQR for THG Group 3: 2.9807792516165676\n\n\n92.11706953\n93.59774779210657\n96.57852704372314\nIQR for THG Group 1: 8.317282607500005\nIQR for THG Group 2: 1.4806782621065793\nIQR for THG Group 3: 2.9807792516165676\n\nshg1 = group1['sh_lsi'].mean()\nshg2 = group2['sh_lsi'].mean()\nshg3 = group3['sh_lsi'].mean()\nprint(shg1)\nprint(shg2)\nprint(shg3)\n\n87.59511333887096\n91.77343810911961\n94.66267309151702\n\n\n87.59511333887096\n91.77343810911961\n94.66267309151702\n\n#Data (calculated above)\nth_means = [thg1, thg2, thg3]\ntss_dashboard = ['3-4 months', '5-7 months', '8-12 months']\n\n#Calculate IQRs\nth_iqr1 = th3 - th1\nth_iqr2 = thg2 - thg1\nth_iqr3 = thg3 - thg2\n\n#Define lower and upper bounds for shading\nlower_bounds = [thg1 - th_iqr1 / 2, thg2 - th_iqr2 / 2, thg3 - th_iqr3 / 2]\nupper_bounds = [thg1 + th_iqr1 / 2, thg2 + th_iqr2 / 2, thg3 + th_iqr3 / 2]\n\n#Setting font\nplt.rc('font', family='Times New Roman', size=22)\n\n#Creating figure and plotting data\nplt.figure(figsize=(8, 8))\nplt.plot(\n    tss_dashboard,\n    th_means,\n    marker='o',\n    markersize=10,  # Match large dot size\n    linestyle='-',\n    linewidth=2,\n    color='royalblue',\n    alpha=0.5,\n    label='Mean TH LSI'\n)\n\n#Shade IQR in light green\nplt.fill_between(tss_dashboard, lower_bounds, upper_bounds, color='#64A846', alpha=0.4, label='IQR')\n\n#Label the means for each TSS group\nfor tss, th in zip(tss_dashboard, th_means):\n    plt.text(tss, th + 1.5, f'{th:.1f}', ha='center', fontsize=20)\n\n#Highlight specific patient point with red dot to indicate patient is not in IQR range\nplt.scatter('5-7 months', 77.0, color='red', s=100, zorder=5)\nplt.text('5-7 months', 77.0 + 1.5, '77.0', color='black', ha='center', fontsize=20)\n\n\nax = plt.gca()\nax.set_yticks(range(50, 101, 10))\nplt.title('TH LSI % Progression (Mean)')\nplt.xlabel('Time Since Surgery')\nplt.ylabel('TH LSI (%)')\nplt.ylim(50, max(upper_bounds) + 10)\n\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nplt.tick_params(axis='x', length=0)\nplt.grid(False)\n\n# Saving the graph\nplt.savefig('TH_LSI_Progression.png', dpi=300, bbox_inches='tight')\n\nplt.tight_layout()\nplt.show() #Display graph\n\n\n\n\n\n\n\n\n\ninterest_patient['tss'].value_counts() #seeing how far along interest patient was at the second visit (falls into second bin for long term graphs)\n\ntss\n3.1     1\n7.5     1\n13.1    1\nName: count, dtype: int64\n\n\n3.1     1\n7.5     1\n13.1    1\nName: tss, dtype: int64\n\n#Setting font\nrcParams['font.family'] = 'Times New Roman'\nrcParams['font.size'] = 22\n\n#Data (calculated above)\nsh_means = [shg1, shg2, shg3]\ntss_dashboard = ['3-4 months', '5-7 months', '8-12 months']\n\n#IQR values\nsh_iqr1 = sh3 - sh1\nsh_iqr2 = shg2 - shg1\nsh_iqr3 = shg3 - shg2\n\n#Bounds for shading\nlower_bounds = [shg1 - sh_iqr1 / 2, shg2 - sh_iqr2 / 2, shg3 - sh_iqr3 / 2]\nupper_bounds = [shg1 + sh_iqr1 / 2, shg2 + sh_iqr2 / 2, shg3 + sh_iqr3 / 2]\n\n#Create figure\nplt.figure(figsize=(8, 8))\n\n#Shade IQR in light green\nplt.fill_between(tss_dashboard, lower_bounds, upper_bounds, color='#64A846', alpha=0.4)\n\n#Plot line and points for means in each TSS group\nplt.plot(\n    tss_dashboard,\n    sh_means,\n    marker='o',\n    markersize=10,\n    linestyle='-',\n    linewidth=2,\n    color='royalblue',\n    alpha=0.5\n)\n\n# Annotate mean values\nfor tss, val in zip(tss_dashboard, sh_means):\n    plt.text(tss, val + 1.5, f'{val:.1f}', ha='center', fontsize=20)\n\n#Specific patient dot labeled and colored red to indicate not in IQR range\nplt.scatter('5-7 months', 89.0, color='green', s=100, zorder=5)\nplt.text('5-7 months', 89.0 - 2.5, '89.0', color='black', ha='center', fontsize=20)\n\n\nax = plt.gca()\nax.set_yticks(range(50, 101, 10))\nplt.title('SH LSI % Progression (Mean)')\nplt.xlabel('Time Since Surgery')\nplt.ylabel('SH LSI (%)')\nplt.ylim(50, max(upper_bounds) + 10)\n\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nplt.tick_params(axis='x', rotation=0, length=0) \nplt.grid(False)\n\n# Saving the graph\nplt.savefig('SH_LSI_Progression.png', dpi=300, bbox_inches='tight')\n\nplt.tight_layout()\nplt.show() #Display graph\n\n\n\n\n\n\n\n\nThese are the calculations for the mean quad lsi (isokinetic) for the long term graph below.\n\naclext = group1['acl_ext_isok_60'].mean()\nconext = group1['con_ext_isok_60'].mean()\navglsi = (aclext / conext ) *100\nprint(avglsi)\n\n64.43505233441954\n\n\n64.43505233441954\n\naclextg2 = group2['acl_ext_isok_60'].mean()\nconextg2 = group2['con_ext_isok_60'].mean()\navglsig2 = (aclextg2 / conextg2 ) *100\nprint(avglsig2)\n\n76.32076941124286\n\n\n76.32076941124286\n\naclextg3 = group3['acl_ext_isok_60'].mean()\nconextg3 = group3['con_ext_isok_60'].mean()\navglsig3 = (aclextg3 / conextg3 ) *100\nprint(avglsig3)\n\n77.91215082321446\n\n\n77.91215082321446\n\n#Setting Font\nrcParams['font.family'] = 'Times New Roman'\nrcParams['font.size'] = 22\n\n#LSI means for quads (isokinetic); calculated above\nlsi_means = [avglsi, avglsig2, avglsig3]\ntss_dashboard = ['3-4 months', '5-7 months', '8-12 months']\n\n# Compute IQRs for ACL extension strength (not LSI directly; because of missing data\niqr1 = group1['acl_ext_isok_60'].quantile(0.75) - group1['acl_ext_isok_60'].quantile(0.25)\niqr2 = group2['acl_ext_isok_60'].quantile(0.75) - group2['acl_ext_isok_60'].quantile(0.25)\niqr3 = group3['acl_ext_isok_60'].quantile(0.75) - group3['acl_ext_isok_60'].quantile(0.25)\n\n#Compute upper and lower bounds for shading\nlower_bounds = [avglsi - iqr1 / 2, avglsig2 - iqr2 / 2, avglsig3 - iqr3 / 2]\nupper_bounds = [avglsi + iqr1 / 2, avglsig2 + iqr2 / 2, avglsig3 + iqr3 / 2]\n\n#Create figure\nplt.figure(figsize=(8, 8))\n\n#Shade IQR region in light green\nplt.fill_between(tss_dashboard, lower_bounds, upper_bounds, color='#64A846', alpha=0.4)\n\n#Plot points and trend line for values \nplt.plot(\n    tss_dashboard,\n    lsi_means,\n    marker='o',\n    markersize=10,\n    linestyle='-',\n    linewidth=2,\n    color='royalblue',\n    alpha=0.5\n)\n\n#Label mean values\nfor tss, val in zip(tss_dashboard, lsi_means):\n    plt.text(tss, val + 1.5, f'{val:.1f}', ha='center', fontsize=20)\n\n#Specific patient point labeled and colored green to indicate within/above IQR range\nplt.scatter('5-7 months', 93.10, color='#64A846', s=100, zorder=5)\nplt.text('5-7 months', 93.10 + 1.5, '93.1', color='black', ha='center', fontsize=20)\n\n\nax = plt.gca()\nax.set_yticks(range(50, 101, 10))\nplt.title('Quadricep Strength Recovery (Mean LSI %)', fontsize=22)\nplt.xlabel('Time Since Surgery', fontsize=22)\nplt.ylabel('Contralateral (%)', fontsize=22)\nplt.ylim(50, max(upper_bounds) + 30)\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nplt.tick_params(axis='x', length=0)\n\n# Saving the graph\nplt.savefig('Quadricep_Strength_Recovery.png', dpi=300, bbox_inches='tight')\n\nplt.tight_layout()\nplt.show() #Display graph",
    "crumbs": [
      "Data Visualizations"
    ]
  },
  {
    "objectID": "datadictionary.html",
    "href": "datadictionary.html",
    "title": "Data Dictionary",
    "section": "",
    "text": "This document contains a data dictionary for the patient data collected in the study. Each variable is defined below:\n\n\n\n\n\n\n\nVariable Name\nDescription\n\n\n\n\nrecord_id\nThe number assigned to each individual patient (starting at 1)\n\n\nredcap_event_name\nDescribes the visit when the data was recorded\n\n\nsex_dashboard\nSex of patient (Male, Female, Not Reported)\n\n\ngraft_dashboard2\nPatient graft type\n\n\nvisit_sex\nSex of patient (Male, Female, Not Reported)\n\n\nvisit_graft\nPatient graft type\n\n\nage\nAge of patient at time of visit (in years)\n\n\nheight_m\nPatient height (in meters)\n\n\nmass_kg\nPatient weight (in kilograms)\n\n\nbmi\nBody Mass Index (BMI) of patient\n\n\ntss\nTime Since Surgery (in months)\n\n\ntss_dashboard\nString of the time since surgery range (in months)\n\n\nikdc\nInternational Knee Documentation Committee score\n\n\nkoos_pain\nKnee Injury and Osteoarthritis Outcome Score pain score\n\n\nacl_rsi\nACL Return to Sport Index score (mental readiness post-surgery)\n\n\nacl_sh\nSingle Hop Score for ACLR side\n\n\ncon_sh\nSingle Hop Score for contralateral side\n\n\nsh_lsi\nSingle Hop LSI (limb symmetry index), % injured vs. uninjured limb\n\n\nacl_th\nTriple Hop Score for ACLR side\n\n\ncon_th\nTriple Hop Score for contralateral side\n\n\nth_lsi\nTriple Hop LSI (limb symmetry index), % injured vs. uninjured limb\n\n\nacl_ext_mvic_60\nACLR Extension MVIC Torque at 60° flexion (Nm/kg)\n\n\ncon_ext_mvic_60\nContralateral Extension MVIC Torque at 60° flexion (Nm/kg)\n\n\nlsi_ext_mvic_60\nLSI % for Extension MVIC Torque at 60° flexion (Nm/kg)\n\n\nacl_flex_mvic_60\nACLR Flexion MVIC Torque at 60° flexion (Nm/kg)\n\n\ncon_flex_mvic_60\nContralateral Flexion MVIC Torque at 60° flexion (Nm/kg)\n\n\nlsi_flex_mvic_60\nLSI % for Flexion MVIC Torque at 60° flexion (Nm/kg)\n\n\nacl_ext_isok_60\nACLR Isokinetic Extension Torque at 60° flexion (Nm/kg)\n\n\ncon_ext_isok_60\nContralateral Isokinetic Extension Torque at 60° flexion (Nm/kg)\n\n\nlsi_ext_isok_60\nLSI % for Isokinetic Extension Torque at 60° flexion (Nm/kg)\n\n\nacl_flex_isok_60\nACLR Isokinetic Flexion Torque at 60° flexion (Nm/kg)\n\n\ncon_flex_isok_60\nContralateral Isokinetic Flexion Torque at 60° flexion (Nm/kg)\n\n\nlsi_flex_isok_60\nLSI % for Isokinetic Flexion Torque at 60° flexion (Nm/kg)",
    "crumbs": [
      "Data Dictionary"
    ]
  }
]