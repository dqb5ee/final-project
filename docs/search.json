[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DS 2023 Final Project",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "datacleaning.html",
    "href": "datacleaning.html",
    "title": "DS 2023 Final Project",
    "section": "",
    "text": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Data Cleaning” ] }, { “cell_type”: “code”, “execution_count”: 28, “metadata”: { “id”: “UYQxTbGc44R_” }, “outputs”: [], “source”: [ “### Import libraries”, “import matplotlib.pyplot as plt”, “import pandas as pd”, “”, “”, “import warnings”, “warnings.filterwarnings(\"ignore\")” ] }, { “cell_type”: “code”, “execution_count”: 29, “metadata”: { “colab”: { “base_uri”: “https://localhost:8080/”, “height”: 256 }, “id”: “PsNqD6Ec44R_”, “outputId”: “3b85e276-d57f-4aba-d2db-bd48dc965423” }, “outputs”: [ { “data”: { “application/vnd.microsoft.datawrangler.viewer.v0+json”: { “columns”: [ { “name”: “index”, “rawType”: “int64”, “type”: “integer” }, { “name”: “record_id”, “rawType”: “int64”, “type”: “integer” }, { “name”: “redcap_event_name”, “rawType”: “object”, “type”: “string” }, { “name”: “redcap_repeat_instrument”, “rawType”: “float64”, “type”: “float” }, { “name”: “sex_dashboard”, “rawType”: “object”, “type”: “string” }, { “name”: “graft_dashboard2”, “rawType”: “object”, “type”: “string” }, { “name”: “med_meniscus”, “rawType”: “float64”, “type”: “float” }, { “name”: “lat_meniscus”, “rawType”: “float64”, “type”: “float” }, { “name”: “lat_stab”, “rawType”: “float64”, “type”: “float” }, { “name”: “physis”, “rawType”: “float64”, “type”: “float” }, { “name”: “visit_sex”, “rawType”: “object”, “type”: “string” }, { “name”: “visit_graft”, “rawType”: “object”, “type”: “string” }, { “name”: “age”, “rawType”: “float64”, “type”: “float” }, { “name”: “age_group”, “rawType”: “float64”, “type”: “float” }, { “name”: “age_group_dashboard”, “rawType”: “float64”, “type”: “float” }, { “name”: “age_group_dashboard_use”, “rawType”: “object”, “type”: “string” }, { “name”: “height_m”, “rawType”: “float64”, “type”: “float” }, { “name”: “mass_kg”, “rawType”: “float64”, “type”: “float” }, { “name”: “bmi”, “rawType”: “float64”, “type”: “float” }, { “name”: “tss”, “rawType”: “float64”, “type”: “float” }, { “name”: “tss_dashboard”, “rawType”: “object”, “type”: “string” }, { “name”: “reinjury”, “rawType”: “object”, “type”: “string” }, { “name”: “ikdc”, “rawType”: “float64”, “type”: “float” }, { “name”: “pedi_ikdc”, “rawType”: “float64”, “type”: “float” }, { “name”: “marx”, “rawType”: “float64”, “type”: “float” }, { “name”: “pedi_fabs”, “rawType”: “float64”, “type”: “float” }, { “name”: “koos_version”, “rawType”: “float64”, “type”: “float” }, { “name”: “koos_pain”, “rawType”: “float64”, “type”: “float” }, { “name”: “koos_sx”, “rawType”: “float64”, “type”: “float” }, { “name”: “koos_adl”, “rawType”: “float64”, “type”: “float” }, { “name”: “koos_sport”, “rawType”: “float64”, “type”: “float” }, { “name”: “koos_qol”, “rawType”: “float64”, “type”: “float” }, { “name”: “acl_rsi”, “rawType”: “float64”, “type”: “float” }, { “name”: “tsk”, “rawType”: “float64”, “type”: “float” }, { “name”: “tss_tegner”, “rawType”: “float64”, “type”: “float” }, { “name”: “tegner_pre”, “rawType”: “float64”, “type”: “float” }, { “name”: “tegner_now”, “rawType”: “float64”, “type”: “float” }, { “name”: “acl_sh”, “rawType”: “float64”, “type”: “float” }, { “name”: “con_sh”, “rawType”: “float64”, “type”: “float” }, { “name”: “sh_lsi”, “rawType”: “float64”, “type”: “float” }, { “name”: “acl_th”, “rawType”: “float64”, “type”: “float” }, { “name”: “con_th”, “rawType”: “float64”, “type”: “float” }, { “name”: “th_lsi”, “rawType”: “float64”, “type”: “float” }, { “name”: “acl_ch”, “rawType”: “float64”, “type”: “float” }, { “name”: “con_ch”, “rawType”: “float64”, “type”: “float” }, { “name”: “ch_lsi”, “rawType”: “float64”, “type”: “float” }, { “name”: “acl_ext_mvic_90”, “rawType”: “float64”, “type”: “float” }, { “name”: “con_ext_mvic_90”, “rawType”: “float64”, “type”: “float” }, { “name”: “lsi_ext_mvic_90”, “rawType”: “float64”, “type”: “float” }, { “name”: “acl_ext_mvic_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “con_ext_mvic_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “lsi_ext_mvic_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “acl_flex_mvic_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “con_flex_mvic_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “lsi_flex_mvic_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “acl_ext_isok_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “con_ext_isok_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “lsi_ext_isok_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “acl_flex_isok_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “con_flex_isok_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “lsi_flex_isok_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “strength_testing_complete”, “rawType”: “float64”, “type”: “float” }, { “name”: “rts”, “rawType”: “float64”, “type”: “float” }, { “name”: “rts_tss”, “rawType”: “float64”, “type”: “float” } ], “conversionMethod”: “pd.DataFrame”, “ref”: “624061bc-7952-4dbf-a871-a98911d9ca5f”, “rows”: [ [ “0”, “1”, “baseline_arm_1”, null, “Male”, “Other”, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null ], [ “1”, “1”, “visit_1_arm_1”, null, null, null, null, null, null, null, “Male”, “Other”, “21.7”, “5.0”, “5.0”, “21 to 25 years”, “1.9”, “87.4”, “24.21052632”, “13.7”, “13 to 24 months”, “No”, “95.4”, null, “16.0”, null, “1.0”, “97.2”, “96.4”, “100.0”, “100.0”, “75.0”, “87.5”, “17.0”, null, “9.0”, “9.0”, “0.81”, “0.83”, “97.68”, null, null, null, “5.09”, “5.24”, “97.31”, “3.18”, “3.43”, “92.73”, null, null, null, null, null, null, “2.57”, “2.92”, “87.86”, “1.5”, “1.45”, “103.32”, “2.0”, null, null ], [ “2”, “1”, “long_term_outcomes_arm_1”, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, “3.0”, “70.0” ], [ “3”, “2”, “baseline_arm_1”, null, “Female”, “HS autograft”, “1.0”, “3.0”, “1.0”, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null ], [ “4”, “2”, “visit_1_arm_1”, null, null, null, null, null, null, null, “Female”, “HS autograft”, “14.5”, “2.0”, “2.0”, “12 to 14 years”, “1.6”, “72.2”, “28.203125”, “7.6”, “5 to 7 months”, “No”, “79.3”, null, “12.0”, null, “1.0”, “86.1”, “92.9”, “98.5”, “97.6”, “43.8”, “8.3”, “25.0”, null, “8.0”, “5.0”, “0.97”, “1.29”, “75.38”, null, null, null, “3.08”, “3.89”, “79.12”, null, null, null, null, null, null, null, null, null, “0.97”, “2.16”, “45.0”, “0.88”, “1.2”, “72.98”, “2.0”, null, null ] ], “shape”: { “columns”: 63, “rows”: 5 } }, “text/html”: [ “], “text/plain”: [ ” record_id redcap_event_name redcap_repeat_instrument \\“,”0 1 baseline_arm_1 NaN “,”1 1 visit_1_arm_1 NaN “,”2 1 long_term_outcomes_arm_1 NaN “,”3 2 baseline_arm_1 NaN “,”4 2 visit_1_arm_1 NaN “,”“,” sex_dashboard graft_dashboard2 med_meniscus lat_meniscus lat_stab \\“,”0 Male Other NaN NaN NaN “,”1 NaN NaN NaN NaN NaN “,”2 NaN NaN NaN NaN NaN “,”3 Female HS autograft 1.0 3.0 1.0 “,”4 NaN NaN NaN NaN NaN “,”“,” physis visit_sex … lsi_flex_mvic_60 acl_ext_isok_60 con_ext_isok_60 \\“,”0 NaN NaN … NaN NaN NaN “,”1 NaN Male … NaN 2.57 2.92 “,”2 NaN NaN … NaN NaN NaN “,”3 NaN NaN … NaN NaN NaN “,”4 NaN Female … NaN 0.97 2.16 “,”“,” lsi_ext_isok_60 acl_flex_isok_60 con_flex_isok_60 lsi_flex_isok_60 \\“,”0 NaN NaN NaN NaN “,”1 87.86 1.50 1.45 103.32 “,”2 NaN NaN NaN NaN “,”3 NaN NaN NaN NaN “,”4 45.00 0.88 1.20 72.98 “,”“,” strength_testing_complete rts rts_tss “,”0 NaN NaN NaN “,”1 2.0 NaN NaN “,”2 NaN 3.0 70.0 “,”3 NaN NaN NaN “,”4 2.0 NaN NaN “,”“,”[5 rows x 63 columns]” ] }, “execution_count”: 29, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “### Load data”, “data = pd.read_csv(‘data/aclr data(in).csv’)”, “data.head()” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [ { “data”: { “image/png”: “”, “text/plain”: [ “&lt;Figure size 1000x800 with 1 Axes&gt;” ] }, “metadata”: {}, “output_type”: “display_data” } ], “source”: [ “### Calculating the percentage of non-null values for each column”, “non_null_percentage = (data.notnull().sum() / len(data)) * 100”, “”, “### Creating a horizontal barplot”, “plt.figure(figsize=(10, 8))”, “non_null_percentage.sort_values().plot(kind=‘barh’, color=‘skyblue’)”, “plt.title(‘Percentage of Non-Null Data for Each Variable’)”, “plt.xlabel(‘Percentage’)”, “plt.ylabel(‘Variable’)”, “plt.tight_layout()”, “plt.show()” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: { “colab”: { “base_uri”: “https://localhost:8080/” }, “id”: “e76QrwUe44SA”, “outputId”: “6d9f41ac-16ad-44e7-e778-b4247ff18709” }, “outputs”: [], “source”: [ “### Dropping columns with more than 99% missing values”, “”, “nan_counts = data.isna().sum()”, “drop_list = []”, “”, “for i in range (len(nan_counts)):”, ” if nan_counts[i] / len(data) &gt; 0.99:“,” drop_list.append(nan_counts.index[i])“,” “,”data.drop(drop_list, axis=1, inplace=True)” ] }, { “cell_type”: “code”, “execution_count”: 31, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “Text(0, 0.5, ‘Frequency’)” ] }, “execution_count”: 31, “metadata”: {}, “output_type”: “execute_result” }, { “data”: { “image/png”: “”, “text/plain”: [ “&lt;Figure size 1000x500 with 1 Axes&gt;” ] }, “metadata”: {}, “output_type”: “display_data” } ], “source”: [ “# Looking at age distribution”, “plt.figure(figsize=(10, 5))”, “plt.hist(data[‘age’], bins=20, color=‘blue’, alpha=0.7, edgecolor=‘black’)”, “plt.title(‘Age Distribution’)”, “plt.xlabel(‘Age’)”, “plt.ylabel(‘Frequency’)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “We are dropping patients over the age of 25 so that when we are comparing patients, the results are not skewed by very old patients who would have much longer recovery time.” ] }, { “cell_type”: “code”, “execution_count”: 32, “metadata”: { “id”: “Y93E0djG44SB” }, “outputs”: [ { “data”: { “text/plain”: [ “Text(0, 0.5, ‘Frequency’)” ] }, “execution_count”: 32, “metadata”: {}, “output_type”: “execute_result” }, { “data”: { “image/png”: “”, “text/plain”: [ “&lt;Figure size 1000x500 with 1 Axes&gt;” ] }, “metadata”: {}, “output_type”: “display_data” } ], “source”: [ “data = data[data[‘age’] &lt;= 25]”, “”, “# Looking at age distribution again after filtering”, “plt.figure(figsize=(10, 5))”, “plt.hist(data[‘age’], bins=20, color=‘blue’, alpha=0.7, edgecolor=‘black’)”, “plt.title(‘Age Distribution’)”, “plt.xlabel(‘Age’)”, “plt.ylabel(‘Frequency’)” ] }, { “cell_type”: “code”, “execution_count”: 33, “metadata”: {}, “outputs”: [ { “data”: { “application/vnd.microsoft.datawrangler.viewer.v0+json”: { “columns”: [ { “name”: “index”, “rawType”: “int64”, “type”: “integer” }, { “name”: “record_id”, “rawType”: “int64”, “type”: “integer” }, { “name”: “redcap_event_name”, “rawType”: “object”, “type”: “string” }, { “name”: “sex_dashboard”, “rawType”: “object”, “type”: “string” }, { “name”: “graft_dashboard2”, “rawType”: “object”, “type”: “string” }, { “name”: “med_meniscus”, “rawType”: “float64”, “type”: “float” }, { “name”: “lat_meniscus”, “rawType”: “float64”, “type”: “float” }, { “name”: “lat_stab”, “rawType”: “float64”, “type”: “float” }, { “name”: “physis”, “rawType”: “float64”, “type”: “float” }, { “name”: “visit_sex”, “rawType”: “object”, “type”: “string” }, { “name”: “visit_graft”, “rawType”: “object”, “type”: “string” }, { “name”: “age”, “rawType”: “float64”, “type”: “float” }, { “name”: “age_group”, “rawType”: “float64”, “type”: “float” }, { “name”: “age_group_dashboard”, “rawType”: “float64”, “type”: “float” }, { “name”: “age_group_dashboard_use”, “rawType”: “object”, “type”: “string” }, { “name”: “height_m”, “rawType”: “float64”, “type”: “float” }, { “name”: “mass_kg”, “rawType”: “float64”, “type”: “float” }, { “name”: “bmi”, “rawType”: “float64”, “type”: “float” }, { “name”: “tss”, “rawType”: “float64”, “type”: “float” }, { “name”: “tss_dashboard”, “rawType”: “object”, “type”: “string” }, { “name”: “reinjury”, “rawType”: “object”, “type”: “string” }, { “name”: “ikdc”, “rawType”: “float64”, “type”: “float” }, { “name”: “pedi_ikdc”, “rawType”: “float64”, “type”: “float” }, { “name”: “marx”, “rawType”: “float64”, “type”: “float” }, { “name”: “koos_version”, “rawType”: “float64”, “type”: “float” }, { “name”: “koos_pain”, “rawType”: “float64”, “type”: “float” }, { “name”: “koos_sx”, “rawType”: “float64”, “type”: “float” }, { “name”: “koos_adl”, “rawType”: “float64”, “type”: “float” }, { “name”: “koos_sport”, “rawType”: “float64”, “type”: “float” }, { “name”: “koos_qol”, “rawType”: “float64”, “type”: “float” }, { “name”: “acl_rsi”, “rawType”: “float64”, “type”: “float” }, { “name”: “tsk”, “rawType”: “float64”, “type”: “float” }, { “name”: “tegner_pre”, “rawType”: “float64”, “type”: “float” }, { “name”: “tegner_now”, “rawType”: “float64”, “type”: “float” }, { “name”: “acl_sh”, “rawType”: “float64”, “type”: “float” }, { “name”: “con_sh”, “rawType”: “float64”, “type”: “float” }, { “name”: “sh_lsi”, “rawType”: “float64”, “type”: “float” }, { “name”: “acl_th”, “rawType”: “float64”, “type”: “float” }, { “name”: “con_th”, “rawType”: “float64”, “type”: “float” }, { “name”: “th_lsi”, “rawType”: “float64”, “type”: “float” }, { “name”: “acl_ch”, “rawType”: “float64”, “type”: “float” }, { “name”: “con_ch”, “rawType”: “float64”, “type”: “float” }, { “name”: “ch_lsi”, “rawType”: “float64”, “type”: “float” }, { “name”: “acl_ext_mvic_90”, “rawType”: “float64”, “type”: “float” }, { “name”: “con_ext_mvic_90”, “rawType”: “float64”, “type”: “float” }, { “name”: “lsi_ext_mvic_90”, “rawType”: “float64”, “type”: “float” }, { “name”: “acl_ext_mvic_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “con_ext_mvic_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “lsi_ext_mvic_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “acl_flex_mvic_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “con_flex_mvic_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “lsi_flex_mvic_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “acl_ext_isok_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “con_ext_isok_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “lsi_ext_isok_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “acl_flex_isok_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “con_flex_isok_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “lsi_flex_isok_60”, “rawType”: “float64”, “type”: “float” }, { “name”: “strength_testing_complete”, “rawType”: “float64”, “type”: “float” }, { “name”: “rts”, “rawType”: “float64”, “type”: “float” }, { “name”: “rts_tss”, “rawType”: “float64”, “type”: “float” } ], “conversionMethod”: “pd.DataFrame”, “ref”: “219a7201-63df-4efc-8d8c-3a469ac0f2d2”, “rows”: [ [ “1”, “1”, “visit_1_arm_1”, null, null, null, null, null, null, “Male”, “Other”, “21.7”, “5.0”, “5.0”, “21 to 25 years”, “1.9”, “87.4”, “24.21052632”, “13.7”, “13 to 24 months”, “No”, “95.4”, null, “16.0”, “1.0”, “97.2”, “96.4”, “100.0”, “100.0”, “75.0”, “87.5”, “17.0”, “9.0”, “9.0”, “0.81”, “0.83”, “97.68”, null, null, null, “5.09”, “5.24”, “97.31”, “3.18”, “3.43”, “92.73”, null, null, null, null, null, null, “2.57”, “2.92”, “87.86”, “1.5”, “1.45”, “103.32”, “2.0”, null, null ], [ “4”, “2”, “visit_1_arm_1”, null, null, null, null, null, null, “Female”, “HS autograft”, “14.5”, “2.0”, “2.0”, “12 to 14 years”, “1.6”, “72.2”, “28.203125”, “7.6”, “5 to 7 months”, “No”, “79.3”, null, “12.0”, “1.0”, “86.1”, “92.9”, “98.5”, “97.6”, “43.8”, “8.3”, “25.0”, “8.0”, “5.0”, “0.97”, “1.29”, “75.38”, null, null, null, “3.08”, “3.89”, “79.12”, null, null, null, null, null, null, null, null, null, “0.97”, “2.16”, “45.0”, “0.88”, “1.2”, “72.98”, “2.0”, null, null ], [ “5”, “2”, “visit_2_arm_1”, null, null, null, null, null, null, “Female”, “HS autograft”, “14.6”, “2.0”, “2.0”, “12 to 14 years”, “1.6”, “50.3”, “19.6484375”, “8.5”, “8 to 12 months”, “No”, “100.0”, null, “16.0”, “1.0”, “100.0”, “92.9”, “100.0”, “100.0”, “93.8”, “95.0”, “17.0”, “10.0”, “9.0”, “1.09”, “1.45”, “75.38”, null, null, null, “3.47”, “4.38”, “79.12”, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, “0.0”, null, null ], [ “6”, “2”, “visit_3_arm_1”, null, null, null, null, null, null, “Female”, “HS autograft”, “15.6”, “3.0”, “3.0”, “15 to 17 years”, “1.6”, “50.3”, “19.6484375”, “20.5”, “13 to 24 months”, “No”, “92.0”, null, “10.0”, “1.0”, “97.2”, “100.0”, “100.0”, “99.5”, “93.8”, “92.5”, “18.0”, “9.0”, “8.0”, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, “0.0”, null, null ], [ “9”, “3”, “visit_1_arm_1”, null, null, null, null, null, null, “Female”, “HS autograft”, “14.0”, “2.0”, “2.0”, “12 to 14 years”, “1.5”, “61.3”, “27.24444444”, “5.5”, “5 to 7 months”, “BLANK”, “100.0”, null, null, “1.0”, “97.2”, “57.1”, “100.0”, “100.0”, “81.3”, “94.2”, null, “9.0”, “9.0”, “1.39”, “1.46”, “95.2”, “4.22”, “4.73”, “89.11”, “4.07”, “4.34”, “93.83”, “1.82”, “2.3”, “79.27”, null, null, null, null, null, null, “1.53”, “1.88”, “81.53”, “0.93”, “1.15”, “81.11”, “2.0”, null, null ] ], “shape”: { “columns”: 60, “rows”: 5 } }, “text/html”: [ “], “text/plain”: [ ” record_id redcap_event_name sex_dashboard graft_dashboard2 med_meniscus \\“,”1 1 visit_1_arm_1 NaN NaN NaN “,”4 2 visit_1_arm_1 NaN NaN NaN “,”5 2 visit_2_arm_1 NaN NaN NaN “,”6 2 visit_3_arm_1 NaN NaN NaN “,”9 3 visit_1_arm_1 NaN NaN NaN “,”“,” lat_meniscus lat_stab physis visit_sex visit_graft … \\“,”1 NaN NaN NaN Male Other … “,”4 NaN NaN NaN Female HS autograft … “,”5 NaN NaN NaN Female HS autograft … “,”6 NaN NaN NaN Female HS autograft … “,”9 NaN NaN NaN Female HS autograft … “,”“,” lsi_flex_mvic_60 acl_ext_isok_60 con_ext_isok_60 lsi_ext_isok_60 \\“,”1 NaN 2.57 2.92 87.86 “,”4 NaN 0.97 2.16 45.00 “,”5 NaN NaN NaN NaN “,”6 NaN NaN NaN NaN “,”9 NaN 1.53 1.88 81.53 “,”“,” acl_flex_isok_60 con_flex_isok_60 lsi_flex_isok_60 \\“,”1 1.50 1.45 103.32 “,”4 0.88 1.20 72.98 “,”5 NaN NaN NaN “,”6 NaN NaN NaN “,”9 0.93 1.15 81.11 “,”“,” strength_testing_complete rts rts_tss “,”1 2.0 NaN NaN “,”4 2.0 NaN NaN “,”5 0.0 NaN NaN “,”6 0.0 NaN NaN “,”9 2.0 NaN NaN “,”“,”[5 rows x 60 columns]” ] }, “execution_count”: 33, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “data.head()” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “#### Writing the data to a CSV file” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “#data.to_csv(‘ACLR_data.csv’, index=False)” ] } ], “metadata”: { “colab”: { “provenance”: [] }, “kernelspec”: { “display_name”: “base”, “language”: “python”, “name”: “python3” }, “language_info”: { “codemirror_mode”: { “name”: “ipython”, “version”: 3 }, “file_extension”: “.py”, “mimetype”: “text/x-python”, “name”: “python”, “nbconvert_exporter”: “python”, “pygments_lexer”: “ipython3”, “version”: “3.11.4” } }, “nbformat”: 4, “nbformat_minor”: 0 }",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>datacleaning.html</span>"
    ]
  },
  {
    "objectID": "dataviz.html",
    "href": "dataviz.html",
    "title": "3  Data Visualization",
    "section": "",
    "text": "4 Final Project EDA\n\n4.0.1 Kylie Stephens, Avalon Bennett, William Wert\n#import libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nAfter reading through the sources about the variables contained within the dataset, I discovered that the data is nested as multiple rows have the same record id- many patients went to multiple visits. There are also grouped variables, such as age, which is split into a few different groups (12-14, 15-17, 18-20, 21-25, 26-34 years old), time since surgery, which is in months and then was grouped in the dashboard variable (3-4 months, 5-7 months, 8-12 months, 13-24 months after surgery).\n### Load data\ndata = pd.read_csv('./ACLR.csv')\ndata.head()\ndata.info()\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 11150 entries, 0 to 11149\nData columns (total 63 columns):\n #   Column                     Non-Null Count  Dtype  \n---  ------                     --------------  -----  \n 0   record_id                  11150 non-null  int64  \n 1   redcap_event_name          11150 non-null  object \n 2   redcap_repeat_instrument   0 non-null      float64\n 3   sex_dashboard              4737 non-null   object \n 4   graft_dashboard2           4737 non-null   object \n 5   med_meniscus               4121 non-null   float64\n 6   lat_meniscus               4121 non-null   float64\n 7   lat_stab                   3662 non-null   float64\n 8   physis                     936 non-null    float64\n 9   visit_sex                  5234 non-null   object \n 10  visit_graft                5234 non-null   object \n 11  age                        5126 non-null   float64\n 12  age_group                  5126 non-null   float64\n 13  age_group_dashboard        4724 non-null   float64\n 14  age_group_dashboard_use    5237 non-null   object \n 15  height_m                   2518 non-null   float64\n 16  mass_kg                    3251 non-null   float64\n 17  bmi                        2517 non-null   float64\n 18  tss                        5125 non-null   float64\n 19  tss_dashboard              5237 non-null   object \n 20  reinjury                   5175 non-null   object \n 21  ikdc                       2951 non-null   float64\n 22  pedi_ikdc                  1647 non-null   float64\n 23  marx                       911 non-null    float64\n 24  pedi_fabs                  37 non-null     float64\n 25  koos_version               2637 non-null   float64\n 26  koos_pain                  2767 non-null   float64\n 27  koos_sx                    2769 non-null   float64\n 28  koos_adl                   2769 non-null   float64\n 29  koos_sport                 2768 non-null   float64\n 30  koos_qol                   2775 non-null   float64\n 31  acl_rsi                    3400 non-null   float64\n 32  tsk                        1011 non-null   float64\n 33  tss_tegner                 0 non-null      float64\n 34  tegner_pre                 2302 non-null   float64\n 35  tegner_now                 2175 non-null   float64\n 36  acl_sh                     2444 non-null   float64\n 37  con_sh                     2445 non-null   float64\n 38  sh_lsi                     2442 non-null   float64\n 39  acl_th                     1551 non-null   float64\n 40  con_th                     1558 non-null   float64\n 41  th_lsi                     1552 non-null   float64\n 42  acl_ch                     1410 non-null   float64\n 43  con_ch                     1356 non-null   float64\n 44  ch_lsi                     1350 non-null   float64\n 45  acl_ext_mvic_90            698 non-null    float64\n 46  con_ext_mvic_90            700 non-null    float64\n 47  lsi_ext_mvic_90            698 non-null    float64\n 48  acl_ext_mvic_60            1019 non-null   float64\n 49  con_ext_mvic_60            1019 non-null   float64\n 50  lsi_ext_mvic_60            1019 non-null   float64\n 51  acl_flex_mvic_60           1011 non-null   float64\n 52  con_flex_mvic_60           1008 non-null   float64\n 53  lsi_flex_mvic_60           1009 non-null   float64\n 54  acl_ext_isok_60            1740 non-null   float64\n 55  con_ext_isok_60            1754 non-null   float64\n 56  lsi_ext_isok_60            2227 non-null   float64\n 57  acl_flex_isok_60           1733 non-null   float64\n 58  con_flex_isok_60           1748 non-null   float64\n 59  lsi_flex_isok_60           2222 non-null   float64\n 60  strength_testing_complete  5237 non-null   float64\n 61  rts                        686 non-null    float64\n 62  rts_tss                    671 non-null    float64\ndtypes: float64(54), int64(1), object(8)\nmemory usage: 5.4+ MB\ndata.shape\n(11150, 63)\nnan_counts = data.isna().sum()\n\nprint(nan_counts)\nrecord_id                        0\nredcap_event_name                0\nredcap_repeat_instrument     11150\nsex_dashboard                 6413\ngraft_dashboard2              6413\n                             ...  \ncon_flex_isok_60              9402\nlsi_flex_isok_60              8928\nstrength_testing_complete     5913\nrts                          10464\nrts_tss                      10479\nLength: 63, dtype: int64\nFor redcap repeat instrument, removal will be best because every value is missing.\ndata = data.drop(columns=['redcap_repeat_instrument'])\ndata['redcap_event_name'].value_counts()\nredcap_event_name\nbaseline_arm_1              4737\nvisit_1_arm_1               3276\nvisit_2_arm_1               1313\nlong_term_outcomes_arm_1    1174\nvisit_3_arm_1                372\nvisit_4_arm_1                117\nvisit_5_arm_1                 56\nvisit_6_arm_1                 36\nvisit_9_arm_1                 33\nvisit_7_arm_1                 20\nvisit_8_arm_1                 14\ndata_upload_arm_2              2\nName: count, dtype: int64\nbaseline_visit_count = (data['redcap_event_name'] == 'baseline_arm_1').sum()\nprint(f\"Number of Baseline Visit entries: {baseline_visit_count}\")\nNumber of Baseline Visit entries: 4737\n#Counting number of patients with at least baseline, visit 1, visit 2, and long term outcomes.\nimportant_redcap_events = {'baseline_arm_1', 'visit_1_arm_1', 'visit_2_arm_1', 'long_term_outcomes_arm_1'}\nrecords_with_events = data.groupby('record_id')['redcap_event_name'].unique()\n\n\nrecords_with_all_events = records_with_events[records_with_events.apply(lambda x: important_redcap_events.issubset(set(x)))]\n\nrecord_ids_2 = records_with_all_events.index.tolist()\n\n#print(record_ids_2)\nhelpful_data = data[data['record_id'].isin(record_ids_2)]\nprint((helpful_data.shape))\nhelpful_data.head()\n(436, 62)\n\n\n\n\n\n\n\n\nrecord_id\n\n\nredcap_event_name\n\n\nsex_dashboard\n\n\ngraft_dashboard2\n\n\nmed_meniscus\n\n\nlat_meniscus\n\n\nlat_stab\n\n\nphysis\n\n\nvisit_sex\n\n\nvisit_graft\n\n\n…\n\n\nlsi_flex_mvic_60\n\n\nacl_ext_isok_60\n\n\ncon_ext_isok_60\n\n\nlsi_ext_isok_60\n\n\nacl_flex_isok_60\n\n\ncon_flex_isok_60\n\n\nlsi_flex_isok_60\n\n\nstrength_testing_complete\n\n\nrts\n\n\nrts_tss\n\n\n\n\n\n\n3\n\n\n2\n\n\nbaseline_arm_1\n\n\nFemale\n\n\nHS autograft\n\n\n1.0\n\n\n3.0\n\n\n1.0\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n…\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n\n\n4\n\n\n2\n\n\nvisit_1_arm_1\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nFemale\n\n\nHS autograft\n\n\n…\n\n\nNaN\n\n\n0.97\n\n\n2.16\n\n\n45.0\n\n\n0.88\n\n\n1.2\n\n\n72.98\n\n\n2.0\n\n\nNaN\n\n\nNaN\n\n\n\n\n5\n\n\n2\n\n\nvisit_2_arm_1\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nFemale\n\n\nHS autograft\n\n\n…\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n0.0\n\n\nNaN\n\n\nNaN\n\n\n\n\n6\n\n\n2\n\n\nvisit_3_arm_1\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nFemale\n\n\nHS autograft\n\n\n…\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n0.0\n\n\nNaN\n\n\nNaN\n\n\n\n\n7\n\n\n2\n\n\nlong_term_outcomes_arm_1\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n…\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n3.0\n\n\n76.0\n\n\n\n\n\n5 rows × 62 columns\n\n\ndata = data[data['age'] &lt;= 25] #Dropping people under the age of 25 to be more reflective of trends in ACL recovery for younger people\nI do not think ‘Not Reported’ and ‘nan’ will be helpful in achieving the final goal of analyzing a subset of patients.\n#Getting an interest patient for example chart\ninterest_patient = data[data['record_id'] == 1473]\ninterest_patient.head()\nprint(interest_patient['lsi_ext_mvic_60'])\n4129    53.78\n4130    68.81\n4131    70.27\nName: lsi_ext_mvic_60, dtype: float64\ninterest_patient['th_lsi'].value_counts()\nSeries([], Name: th_lsi, dtype: int64)\ninterest_patient['con_th'].value_counts()\nSeries([], Name: con_th, dtype: int64)\nprint(interest_patient['sh_lsi'])\n4129      NaN\n4130    83.33\n4131    99.33\nName: sh_lsi, dtype: float64\n#data.columns.tolist()\n#interest_patient.columns.tolist()\n#Age Histogram after dropping individuals over the age of 25\nplt.hist(data['age'], bins = 15)\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.title('Age of Individuals Distribution')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both',length=0)\n\n# Saving the graph\n#plt.savefig('age_dist_histogram.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\npng\n\n\nThis shows that there is a lot more data under for individuals under the age of 25- probably a subset we would be more interested in.\nSex_Dashboard is empty for helpful_data, so I am going to drop it and use visit sex for reference instead.\n#Histogram of ACL RSI for Patients\nplt.hist(data['acl_rsi'], bins = 10)\nplt.xlabel('ACL RSI')\nplt.ylabel('Count')\nplt.title('ACL RSI Distribution for Patients')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both',length=0)\n\n# Saving the graph\n#plt.savefig('acl_rsi_histogram.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\npng\n\n\nNote- this histogram is skewed left\nMost of Pedi_ikdc is missing. I think the best method of handling this many missing values\ndata = data.drop(columns=['pedi_ikdc'])\nplt.scatter(data['age'], data['ikdc'])\nplt.xlabel('Age')\nplt.ylabel('IKDC')\nplt.title('Is IKDC Correlated to the Age of the Patient?')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both',length=0)\n\n# Saving the graph\n#plt.savefig('ikdc_age_scatter.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\npng\n\n\n#Calculating correlation coefficient between age and ikdc\ncorrelation_coefficient = data[['age', 'ikdc']].corr().iloc[0,1]\nprint(correlation_coefficient)\n#Not close to negative 1, indicating there is not a strong correlation.\n-0.17753340913066273\nmissing_counts = data.isna().sum()\nmissing_counts\nrecord_id                       0\nredcap_event_name               0\nsex_dashboard                4371\ngraft_dashboard2             4371\nmed_meniscus                 4371\n                             ... \ncon_flex_isok_60             2833\nlsi_flex_isok_60             2359\nstrength_testing_complete       0\nrts                          4371\nrts_tss                      4371\nLength: 61, dtype: int64\nsummary_statistics = data.describe()\nprint(summary_statistics)\n         record_id  med_meniscus  lat_meniscus  lat_stab  physis          age  \\\ncount  4371.000000           0.0           0.0       0.0     0.0  4371.000000   \nmean   2086.563715           NaN           NaN       NaN     NaN    17.306231   \nstd    1539.267182           NaN           NaN       NaN     NaN     2.633281   \nmin       1.000000           NaN           NaN       NaN     NaN     8.855556   \n25%     808.500000           NaN           NaN       NaN     NaN    15.680556   \n50%    1534.000000           NaN           NaN       NaN     NaN    17.000000   \n75%    3361.000000           NaN           NaN       NaN     NaN    18.561944   \nmax    4738.000000           NaN           NaN       NaN     NaN    25.000000   \n\n         age_group  age_group_dashboard     height_m      mass_kg  ...  \\\ncount  4371.000000          4319.000000  1967.000000  2684.000000  ...   \nmean      3.266301             3.293586     1.724147    73.015708  ...   \nstd       0.889042             0.858671     0.106787    19.508640  ...   \nmin       1.000000             2.000000     1.300000     0.000000  ...   \n25%       3.000000             3.000000     1.650000    60.330000  ...   \n50%       3.000000             3.000000     1.700000    69.000000  ...   \n75%       4.000000             4.000000     1.800000    81.925000  ...   \nmax       5.000000             5.000000     3.230000   208.000000  ...   \n\n       lsi_flex_mvic_60  acl_ext_isok_60  con_ext_isok_60  lsi_ext_isok_60  \\\ncount            986.00      1530.000000      1544.000000      2017.000000   \nmean                inf         1.682020         2.258479        73.837091   \nstd                 NaN         0.589578         0.645303        22.203231   \nmin               25.32         0.270000         0.390000        10.967185   \n25%               67.60         1.280000         1.852418        59.035326   \n50%               80.41         1.630000         2.250000        74.380000   \n75%               93.47         2.048631         2.681793        86.760000   \nmax                 inf         6.010000         7.390000       247.370000   \n\n       acl_flex_isok_60  con_flex_isok_60  lsi_flex_isok_60  \\\ncount       1523.000000       1538.000000       2012.000000   \nmean           1.109044          1.252070         90.162087   \nstd            0.387971          0.361846         18.787932   \nmin            0.100000          0.030000         22.550000   \n25%            0.850000          1.020000         79.630000   \n50%            1.080000          1.240000         90.383888   \n75%            1.350000          1.460000        100.660837   \nmax            4.710000          5.110000        311.110000   \n\n       strength_testing_complete  rts  rts_tss  \ncount                4371.000000  0.0      0.0  \nmean                    1.644475  NaN      NaN  \nstd                     0.764713  NaN      NaN  \nmin                     0.000000  NaN      NaN  \n25%                     2.000000  NaN      NaN  \n50%                     2.000000  NaN      NaN  \n75%                     2.000000  NaN      NaN  \nmax                     2.000000  NaN      NaN  \n\n[8 rows x 53 columns]\nplt.scatter(data['age'], data['acl_rsi'])\nplt.xlabel('Age')\nplt.ylabel('ACL RSI')\nplt.title('Is ACL RSI Correlated to the Age of the Patient?')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both',length=0)\n\n# Saving the graph\n#plt.savefig('acl_rsi_age_scatter.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\npng\n\n\ncorrelation_coefficient2 = data[['age', 'acl_rsi']].corr().iloc[0,1]\nprint(correlation_coefficient2)\n#Correlation is still not super strong\n-0.16640606532621763\nplt.hist(data['tss_dashboard'], bins = 4)\nplt.xlabel('Time Since Surgery Group')\nplt.ylabel('Count')\nplt.title('Time Since Surgery Distribution')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both',length=0)\n# Saving the graph\n#plt.savefig('tss_dashboard_histogram.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\npng\n\n\nA lot more of the data is coming from patients who were 5-12 months into their recovery.\ndata['lsi_ext_isok_60'].value_counts()\n100.000000    8\n50.000000     6\n88.890000     5\n66.670000     5\n79.000000     5\n             ..\n103.080000    1\n90.570000     1\n57.700000     1\n29.610000     1\n85.435897     1\nName: lsi_ext_isok_60, Length: 1821, dtype: int64\nplt.hist(data['lsi_ext_isok_60'])\nplt.xlabel('LSI For Isokinetic Knee Extension')\nplt.ylabel('Count')\nplt.title('LSI for Isokinetic Knee Extension Distribution')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both',length=0)\n\n# Saving the graph\n#plt.savefig('lsi_ext_isok_60_histogram.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\npng\n\n\nShows us there is an outlier.\nlsi_ext_isok_60_mean = np.mean(data['lsi_ext_isok_60'])\nprint(lsi_ext_isok_60_mean, '%')\n73.83709135616758 %\n#Peak Torque recorded and normalized to body mass\nplt.hist(data['acl_flex_isok_60'])\nplt.xlabel('ACLR Isokinetic Flexion Torque')\nplt.ylabel('Count')\nplt.title('ACLR Isokinetic Flexion Torque Distribution')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both',length=0)\n\n# Saving the graph\n#plt.savefig('aclr_isok_flexion_histogram.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\npng\n\n\nplt.scatter(data['bmi'], data['sh_lsi'])\nplt.xlabel('BMI')\nplt.ylabel('Single Hop LSI')\nplt.title('Correlation between Single Hop LSI and BMI')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both',length=0)\n\n# Saving the graph\n#plt.savefig('sh_lsi_bmi_scatter.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\npng\n\n\ngreen_mask = data['sh_lsi'] &gt; 85\n\n\nplt.scatter(data['tss_dashboard'][~green_mask], data['sh_lsi'][~green_mask], color='blue', label='sh_lsi &lt;= 85')\n\nplt.scatter(data['tss_dashboard'][green_mask], data['sh_lsi'][green_mask], color='green', label='sh_lsi &gt; 85')\n\n\nplt.xlabel('Time Since Surgery Groups')\nplt.ylabel('Single Hop LSI')\nplt.title('Any Correlation between Single Hop LSI and Time Since Surgery?')\n\n\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\n\n\nplt.tick_params(axis='y', which='both', length=0)\n\n\nplt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='LSI Conditions')\n\n# Saving the graph\n#plt.savefig('sh_lsi_tss_dashboard_scatter.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\npng\n\n\ngroup_5_7_months = data[data['tss_dashboard'] == '5 to 7 months']\ngroup_8_12_months = data[data['tss_dashboard'] == '8 to 12 months']\n\nplt.figure(figsize=(10, 6))\n\nsns.kdeplot(group_5_7_months['acl_rsi'], label='5 to 7 months', fill=True, color='blue')\nsns.kdeplot(group_8_12_months['acl_rsi'], label='8 to 12 months', fill=True, color='green')\n\nplt.xlabel('ACL RSI')\nplt.ylabel('Density')\nplt.title('Distribution of ACL RSI Scores for Groups 5 to 7 Months and 8 to 12 Months')\n\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\n\nplt.tick_params(axis='y', which='both', length=0)\n\n\nplt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Time Since Surgery')\n\n# Saving the graph\n#plt.savefig('acl_rsi_kdeplot.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\npng\n\n\ncounts = data['visit_graft'].value_counts()\nplt.bar(counts.index, counts.values)\nplt.xlabel('Graft Type at Visit')\nplt.ylabel('Count')\nplt.title('Type of Graft Distribution')\nax = plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both', length=0)\n\n# Saving the graph\n#plt.savefig('graft_type_histogram.png', dpi=300, bbox_inches='tight')\nplt.tight_layout()\nplt.show()\n\n\n\npng\n\n\nBTB and HS autograft appears to be the most common graph types used.\nbtb_data = data[data['visit_graft'] == 'BTB autograft']\nhs_data = data[data['visit_graft'] == 'HS autograft']\nplt.figure(figsize=(10, 6))\n\nsns.kdeplot(btb_data['acl_rsi'], label='BTB Graft', fill=True, color='blue', alpha=0.6)\nsns.kdeplot(hs_data['acl_rsi'], label='HS Graft', fill=True, color='green', alpha=0.6)\n\n\nplt.xlabel('ACL RSI')\nplt.ylabel('Density')\nplt.title('Distribution of ACL RSI for BTB Graft vs HS Graft')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both',length=0)\n\nplt.legend()\n\n# Saving the graph\n#plt.savefig('acl_rsi_graft_kdeplot.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\npng\n\n\nmean_btb = np.mean(btb_data['acl_rsi'])\nmean_hs = np.mean(hs_data['acl_rsi'])\nprint('Mean ACL RSI for BTB: ', mean_btb, 'Mean ACL RSI for HS: ', mean_hs)\nMean ACL RSI for BTB:  66.71625423728814 Mean ACL RSI for HS:  69.58213018867924\nplt.hist(data['redcap_event_name'], bins = 5)\nplt.xlabel('Event Name')\nplt.ylabel('Count')\nplt.title('Event Distribution')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.xticks(rotation=45, ha='right')\nplt.tick_params(axis='y', which='both',length=0)\n\n# Saving the graph\n#plt.savefig('event_distribution_histogram.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\npng\n\n\nhelpful_data_clean = data.dropna(subset=['acl_rsi'])\n\nplt.figure(figsize=(12, 8))\n\n\nsns.kdeplot(data=helpful_data_clean, x='acl_rsi', hue='redcap_event_name', fill=True, common_norm=False, warn_singular=False)\n\n\nplt.xlabel('ACL RSI')\nplt.ylabel('Density')\nplt.title('ACL RSI Distribution at Each Visit')\n\n\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both', length=0)\n\n# Saving the graph\n#plt.savefig('acl_rsi_visit_kdeplot.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\npng\n\n\naverage_acl_rsi_per_visit = data.groupby('tss_dashboard')['acl_rsi'].mean()\nprint('Mean ACL RSI at Visit:', average_acl_rsi_per_visit)\niqr_per_time = {}\nfor time in average_acl_rsi_per_visit.index:\n    time_data = data[data['tss_dashboard'] == time]['acl_rsi'].dropna()\n    q1 = time_data.quantile(0.25)\n    q3 = time_data.quantile(0.75)\n    iqr_per_time[time] = q3 - q1\n\nprint(\"IQR for each time period:\", iqr_per_time)\nq1_acl_rsi = data['acl_rsi'].quantile(0.25)\nq3_acl_rsi = data['acl_rsi'].quantile(0.75)\niqr_acl_rsi = q3_acl_rsi - q1_acl_rsi\nprint(f\"IQR for ACL RSI: {iqr_acl_rsi}\")\nMean ACL RSI at Visit: tss_dashboard\n13 to 24 months    67.849391\n3 to 4 months      57.920182\n5 to 7 months      70.263743\n8 to 12 months     76.423492\nNot Reported       60.345864\nPreoperative             NaN\nName: acl_rsi, dtype: float64\nIQR for each time period: {'13 to 24 months': 37.285, '3 to 4 months': 35.0, '5 to 7 months': 33.3, '8 to 12 months': 31.975, 'Not Reported': 37.7225, 'Preoperative': nan}\nIQR for ACL RSI: 36.67\nfrom matplotlib import rcParams\n\n#Set font and font size\nrcParams['font.family'] = 'Times New Roman'\nrcParams['font.size'] = 22  \n\n#Data (calculated above)\nrsi_means = [57.920182, 70.263743, 76.423492]\ntss_dashboard = ['3-4 months', '5-7 months', '8-12 months']\niqr_values = [35.0, 33.3, 31.975]\n\n#Creating figure\nplt.figure(figsize=(8, 8))\n\n#Calculating the upper and lower bounds for shading\nupper_bounds = [mean + iqr / 2 for mean, iqr in zip(rsi_means, iqr_values)]\nlower_bounds = [mean - iqr / 2 for mean, iqr in zip(rsi_means, iqr_values)]\n\n#Shade the IQR regions to show the patient where they are + where they should be aiming to be\nplt.fill_between(tss_dashboard, lower_bounds, upper_bounds, color='green', alpha=0.2, label='IQR')\n\n#Plotting RSI means\nplt.plot(\n    tss_dashboard,\n    rsi_means,\n    marker='o',\n    markersize=10,\n    linestyle='-',\n    linewidth=2,\n    color=(65/255, 105/255, 225/255, 0.5)\n)\n\n#Annotating and labeling each point that shows the mean RSI score for patient's overtime\nfor tss, th in zip(tss_dashboard, rsi_means):\n    plt.text(tss, th + 1.5, f'{th:.1f}', ha='center', fontsize=20)\n\n#Point with patient's RSI score at this visit in correct time bin\nplt.scatter('5-7 months', 60.8, color=('green'), s=100, zorder=5) #Dot is green because it is in RSI range\nplt.text('5-7 months', 60.8 + 1.5, '60.8', color='black', ha='center', fontsize=20) #Label the point\n\n\nax = plt.gca()\nax.set_ylim(20, 100)\nax.set_yticks(range(20, 101, 20))\nplt.title('RSI Score Progression') #Graph Title\nplt.xlabel('Time Since Surgery') #X-axis label\nplt.ylabel('RSI Score (Mean)') #Y-axis Label\nax.spines['top'].set_visible(False) #Get rid of top spine of graph\nax.spines['right'].set_visible(False) #Get rid of top spine of graph\nax.tick_params(axis='x', rotation=0, length=0) #Get rid of x-axis ticks\n\n# Saving the graph\n#plt.savefig('RSI_Score_Progression.png', dpi=300, bbox_inches='tight')\n\nplt.tight_layout()\nplt.show() #Display Graph\n\n\n\npng\n\n\ninterest_patient['age'].value_counts()\n15.1    1\n15.5    1\n15.9    1\nName: age, dtype: int64\ndata['record_id'].value_counts()\n4552    16\n4666    13\n4548    11\n4554    11\n4668    11\n        ..\n1422     1\n1421     1\n1420     1\n1419     1\n4738     1\nName: record_id, Length: 2717, dtype: int64\ndata['redcap_event_name'].value_counts()\nvisit_1_arm_1    2716\nvisit_2_arm_1    1135\nvisit_3_arm_1     275\nvisit_4_arm_1      91\nvisit_5_arm_1      52\nvisit_6_arm_1      35\nvisit_9_arm_1      33\nvisit_7_arm_1      20\nvisit_8_arm_1      14\nName: redcap_event_name, dtype: int64\nrequired_visits = {'visit_1_arm_1', 'visit_2_arm_1'}\n\n# Group by patient and get set of their visits\nvisit_sets = data.groupby('record_id')['redcap_event_name'].apply(set)\n\n# Count how many have all required visits\npatients_with_all_visits = visit_sets.apply(lambda x: required_visits.issubset(x)).sum()\n\nprint(f\"Number of patients with baseline, visit 1, and visit 2: {patients_with_all_visits}\")\nNumber of patients with baseline, visit 1, and visit 2: 1134\nvisit1_data = data[data['redcap_event_name'] == 'visit_1_arm_1']\nvisit2_data = data[data['redcap_event_name'] == 'visit_2_arm_1']\nq1 = visit2_data['lsi_ext_isok_60'].quantile(0.25)\nq3 = visit2_data['lsi_ext_isok_60'].quantile(0.75)\niqr = q3 - q1\nprint(q1)\nprint(q3)\nprint(iqr)\n65.38\n91.4\n26.02000000000001\nq21 = visit2_data['lsi_flex_isok_60'].quantile(0.25)\nq23 = visit2_data['lsi_flex_isok_60'].quantile(0.75)\niqr2 = q23 - q21\nprint(q21)\nprint(q23)\nprint(iqr2)\n80.9320467425\n101.671707325\n20.739660582499994\ninterest_patient.head()\n\n\n\n\n\n\n\n\nrecord_id\n\n\nredcap_event_name\n\n\nsex_dashboard\n\n\ngraft_dashboard2\n\n\nmed_meniscus\n\n\nlat_meniscus\n\n\nlat_stab\n\n\nphysis\n\n\nvisit_sex\n\n\nvisit_graft\n\n\n…\n\n\nlsi_flex_mvic_60\n\n\nacl_ext_isok_60\n\n\ncon_ext_isok_60\n\n\nlsi_ext_isok_60\n\n\nacl_flex_isok_60\n\n\ncon_flex_isok_60\n\n\nlsi_flex_isok_60\n\n\nstrength_testing_complete\n\n\nrts\n\n\nrts_tss\n\n\n\n\n\n\n4129\n\n\n1473\n\n\nvisit_1_arm_1\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nFemale\n\n\nQT autograft\n\n\n…\n\n\n61.54\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n2.0\n\n\nNaN\n\n\nNaN\n\n\n\n\n4130\n\n\n1473\n\n\nvisit_2_arm_1\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nFemale\n\n\nQT autograft\n\n\n…\n\n\n76.74\n\n\n0.96\n\n\n1.03\n\n\n93.10\n\n\n0.39\n\n\n0.57\n\n\n68.75\n\n\n2.0\n\n\nNaN\n\n\nNaN\n\n\n\n\n4131\n\n\n1473\n\n\nvisit_3_arm_1\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nFemale\n\n\nQT autograft\n\n\n…\n\n\n89.58\n\n\n1.12\n\n\n1.39\n\n\n80.77\n\n\n0.82\n\n\n0.84\n\n\n97.87\n\n\n2.0\n\n\nNaN\n\n\nNaN\n\n\n\n\n\n3 rows × 62 columns\n\n\ninterest_patient['lsi_flex_mvic_60'].value_counts()\n61.54    1\n76.74    1\n89.58    1\nName: lsi_flex_mvic_60, dtype: int64\ninterest_patient['lsi_ext_mvic_60'].value_counts()\n53.78    1\n68.81    1\n70.27    1\nName: lsi_ext_mvic_60, dtype: int64\nx_axis = ['Running', 'Squatting', 'Landing', 'Bilateral Jump'] #Labels for x-axis\nscores = [89.4, 76.8, 44.3, 68.3] #Values to plot for the bars\n\n#Individually assigning each activity to a variable to make the bars different colors\nperson1 = ['Running']\nperson2 = ['Squatting']\nperson3 = ['Landing']\nperson4 = ['Bilateral Jump']\n\n#Setting the font\nplt.rc('font', family='Times New Roman')\n\n#Creating the figure\nfig, ax = plt.subplots(figsize=(10, 6))\n\n#Coloring the bars separately (imitating original LEAP report)\ncolors = []\nfor label in x_axis:\n    if any(h in label for h in person1):\n        colors.append('#004AAD')\n    elif any(h in label for h in person2):\n        colors.append('#F67B2F')\n    elif any(h in label for h in person3):\n        colors.append('#F03F36')\n    else:\n        colors.append('#8680C4')\n\n#Create bars and label with their respective activity names\nbars = ax.bar(x_axis, scores, color=colors, alpha=0.5)\n\n#Add value labels on top of each bar\nfor bar in bars:\n    height = bar.get_height()\n    ax.text(\n        bar.get_x() + bar.get_width() / 2,\n        height + 1.5,\n        f'{height:.1f}',\n        ha='center',\n        va='bottom',\n        fontsize=22\n    )\n\n\nax.set_ylim(0, 100) #Y-limit to 100 (different from LEAP report; ideal symmetry between injured and uninjured limbs would be 100%)\nax.set_title('Biomechanics Symmetry', fontsize=22) #Figure Title\nax.set_ylabel('% Contralateral', fontsize=22) #Y-axis label \nax.spines['top'].set_visible(False) #Get rid of top spine of graph\nax.spines['right'].set_visible(False) #Get rid of right spine of graph\nax.tick_params(axis='x', rotation=0, length=0) #Get rid fo x-axis ticks\nax.set_xticklabels(x_axis, fontsize=22) #Increase size of x-xis labels\nax.axhline(40, color='#64A846', linestyle='--', linewidth=1.5, alpha=0.5) #Graph horizontal, green dashed lines at these values (imitating LEAP report)\nax.axhline(80, color='#64A846', linestyle='--', linewidth=1.5, alpha=0.5)\nax.set_yticks([0, 40, 80, 120]) #Setting y-ticks and labels only for these values (imitating original LEAP report)\nax.set_yticklabels([0, 40, 80, 120], fontsize=12)\n\n# Saving the graph\n#plt.savefig('Biomechanics_Symmetry.png', dpi=300, bbox_inches='tight')\n\nplt.tight_layout()\nplt.show() #Display graph\n\n\n\npng\n\n\nlabels_mvic = ['Hamstring Strength (60 °/s)'] #First subplot label\nlabels_isok = ['Quad Strength (60 °/s)'] #Second subplot label\nscores_ham = [68.75] #LSI patient value for hamstring strength (Isokinetic)\nscores_quad = [93.10] #LSI patient value for quadricep strength (Isokinetic)\n\n#Define IQR bounds (calculated above)\nq1, q3 = 61.9, 89.8      \nq21, q23 = 84.7, 104.4    \n\n#Setting font\nplt.rc('font', family='Times New Roman')\n\n#Creating figure with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6), sharey=True)\n\nax1.bar(labels_mvic, scores_ham, color='#F67B2F', alpha=0.5) #Plotting the patient's lsi_flex_isok_60 as an orange bar\nax1.axhspan(q1, q3, color='#64A846', alpha=0.4)  #Shading the IQR in a light green color\nax1.text(0, scores_ham[0] + 2, f'{scores_ham[0]:.1f}', ha='center', fontsize=22)\n\nax1.set_ylabel('% Contralateral', fontsize=22) #Setting y-axis label \nax1.set_ylim(0, 120)  #Y-limit to 120 to imitate the original LEAP report\nax1.tick_params(axis='x', length=0) #Get rid of x-axis tick marks\nax1.spines['top'].set_visible(False) #Get rid of top spine of graph\nax1.spines['right'].set_visible(False) #Get rid of right spine of graph\nax1.set_xticklabels(labels_mvic, fontsize=22) #Label the bar\n\n\nax2.bar(labels_isok, scores_quad, color='#004AAD', alpha=0.5) #Plotting the patient's lsi_ext_isok_60 as a blue bar\nax2.axhspan(q21, q23, color='#64A846', alpha=0.4)  #Shading the IQR in a light green color\nax2.text(0, scores_quad[0] + 2, f'{scores_quad[0]:.1f}', ha='center', fontsize=22)\n\nax2.set_ylim(0, 120)  #Y-limit to 120 to imitate the original LEAP report\nax2.tick_params(axis='x', length=0) #Get rid of x-axis tick marks\nax2.spines['top'].set_visible(False) #Get rid of top spine of graph\nax2.spines['right'].set_visible(False) #Get rid of right spine of graph\nax2.tick_params(axis='y', length=0) #Get rid of y-axis tick marks (only keeping them for the first subplot)\nax2.set_xticklabels(labels_isok, fontsize=22) #Label the bar\n\n##Only having ticks and labels on the y-axis for these values (imitating original LEAP report)\nfor ax in [ax1, ax2]:\n    ax.set_yticks([0, 40, 80, 120])\n    ax.set_yticklabels([0, 40, 80, 120], fontsize=22)\n\n#Overall Graph Title\nfig.suptitle('Quadriceps and Hamstrings Strength at 60 °/s (Isokinetic)', fontsize=22)\nplt.tight_layout(rect=[0, 0, 1, 0.95])\n\n# Saving the graph\n#plt.savefig('Strength_Comparison.png', dpi=300, bbox_inches='tight')\n\nplt.show() #Display the graph\n\n\n\npng\n\n\nq_1 = visit2_data['lsi_ext_mvic_60'].quantile(0.25)\nq_3 = visit2_data['lsi_ext_mvic_60'].quantile(0.75)\niqr_1 = q_3 - q_1\nprint(q_1)\nprint(q_3)\nprint(iqr_1)\n77.27\n100.0\n22.730000000000004\nq_12 = visit2_data['lsi_flex_mvic_60'].quantile(0.25)\nq_32 = visit2_data['lsi_flex_mvic_60'].quantile(0.75)\niqr_2 = q_32 - q_12\nprint(q_12)\nprint(q_32)\nprint(iqr_2)\n76.065\n99.255\n23.189999999999998\nlabels_mvic = ['Hamstring Strength (60 °/s)'] #First subplot label\nlabels_isok = ['Quad Strength (60 °/s)'] #Second subplot label\nscores_ham = [68.75] #LSI patient value for hamstring strength (Isometric)\nscores_quad = [93.10] #LSI patient value for quadricept strength (Isometric)\n\n#Define IQR bounds\nq1, q3 = visit2_data['lsi_flex_mvic_60'].quantile(0.25), visit2_data['lsi_flex_mvic_60'].quantile(0.75)  #Hamstring IQR\nq21, q23 = visit2_data['lsi_ext_mvic_60'].quantile(0.25), visit2_data['lsi_ext_mvic_60'].quantile(0.75)  #Quadriceps IQR\n\n#Set font\nplt.rc('font', family='Times New Roman')\n\n#Create figure with 2 subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6), sharey=True)\n\nax1.bar(labels_mvic, scores_ham, color='#F67B2F', alpha=0.5) #Plotting the patient's lsi_flex_mvic_60 as an orange bar\nax1.axhspan(q1, q3, color='#64A846', alpha=0.4)  #Shading the IQR in a light green color\nax1.text(0, scores_ham[0] + 2, f'{scores_ham[0]:.1f}', ha='center', fontsize=16) #Labeling bar with value\n\nax1.set_ylabel('% Contralateral', fontsize=22) #Setting y-axis label \nax1.set_ylim(0, 120) #Y-limit to 120 to imitate the original LEAP report\nax1.tick_params(axis='x', length=0) #Get rid of x-axis tick marks\nax1.spines['top'].set_visible(False) #Get rid of top spine of graph\nax1.spines['right'].set_visible(False) #Get rid of right spine of graph\nax1.set_xticklabels(labels_mvic, fontsize=22) #Label the bar\n\n\nax2.bar(labels_isok, scores_quad, color='#004AAD', alpha=0.5)\nax2.axhspan(q21, q23, color='#64A846', alpha=0.4)  ##Shading the IQR in a light green color\nax2.text(0, scores_quad[0] + 2, f'{scores_quad[0]:.1f}', ha='center', fontsize=16)\n\nax2.set_ylim(0, 120) #Y-limit to 120 to imitate the original LEAP report\nax2.tick_params(axis='x', length=0) #Get rid of x-axis tick marks\nax2.spines['top'].set_visible(False) #Get rid of top spine of graph\nax2.spines['right'].set_visible(False) #Get rid of right spine of graph\nax2.tick_params(axis='y', length=0) #Get rid of y-axis tick marks(only having ticks on first subplot)\nax2.set_xticklabels(labels_isok, fontsize=22) #Label the bar\n\n#Only setting y-ticks and labels for these values on both subplots\nfor ax in [ax1, ax2]:\n    ax.set_yticks([0, 40, 80, 120])\n    ax.set_yticklabels([0, 40, 80, 120], fontsize=22)\n\n#Overall Graph Title\nfig.suptitle('Quadriceps and Hamstrings Strength at 60 °/s (Isokinetic)', fontsize=22)\nplt.tight_layout(rect=[0, 0, 1, 0.95])\n\n# Saving the graph\n#plt.savefig('Strength_Comparison.png', dpi=300, bbox_inches='tight')\nplt.show() #Display the graph\n\n\n\npng\n\n\npeople = ['Single Hop LSI', 'Triple Hop LSI'] #Different bar labels for each subplot\nscores = [89.0, 77.0] #Patient LSI for SH and TH \n\n#Assigning to diff. variables to color differently\nhighlight_person1 = ['Single Hop LSI'] \nhighlight_person2 = ['Triple Hop LSI']\n\n#Calculating IQRs (assumes visit2_data is already defined)\nsh_q1 = visit2_data['sh_lsi'].quantile(0.25)\nsh_q3 = visit2_data['sh_lsi'].quantile(0.75)\nth_q1 = visit2_data['th_lsi'].quantile(0.25)\nth_q3 = visit2_data['th_lsi'].quantile(0.75)\n\n# Setting font\nplt.rc('font', family='Times New Roman')\n\n#Creating figure with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6), sharey=True)\n\n#First subplot\ncolors1 = ['#F67B2F' if p in highlight_person1 else 'gray' for p in people[:1]]\nax1.bar(people[:1], scores[:1], color=colors1, alpha=0.5) #Plotting the patient's SH LSI as an orange bar\nax1.axhspan(sh_q1, sh_q3, color='#64A846', alpha=0.4) #Shading the IQR in a light green color\nax1.text(0, scores[0] + 2, f'{scores[0]:.1f}', ha='center', fontsize=22) \n\nax1.set_ylabel('% Contralateral', fontsize=22) #Y-axis label\nax1.set_xticklabels(highlight_person1, fontsize=22) #Label the bar\nax1.set_ylim(0, 120) #Y-limit to 120 to imitate the original LEAP report\nax1.tick_params(axis='x', rotation=0, length=0) #Get rid of x-axis tick marks\nax1.tick_params(axis='y', length=0) #Get rid of y-axis tick marks\nax1.spines['top'].set_visible(False) #Get rid of top spine of graph\nax1.spines['right'].set_visible(False) #Get rid of right spine of graph\nax1.grid(False) #No grid lines\n\n#Second subplot\ncolors2 = ['#F67B2F' if p in highlight_person2 else 'gray' for p in people[1:]] \nax2.bar(people[1:], scores[1:], color=colors2, alpha=0.5) #Plotting the patient's TH LSI as an orange bar\nax2.axhspan(th_q1, th_q3, color='#64A846', alpha=0.4) #Shading the IQR in a light green color\nax2.text(0, scores[1] + 2, f'{scores[1]:.1f}', ha='center', fontsize=22)\n\nax2.set_xticklabels(highlight_person2, fontsize=22) #Label the bar\nax2.set_ylim(0, 120) #Y-limit to 120 to imitate the original LEAP report\nax2.tick_params(axis='x', rotation=0, length=0)\nax2.tick_params(axis='y', length=0) #Get rid of y-axis tick marks\nax2.spines['top'].set_visible(False) #Get rid of top spine of graph\nax2.spines['right'].set_visible(False) #Get rid of right spine of graph\nax2.grid(False) #No grid lines\n\n#Only setting y-ticks and labels for these values on both subplots\nfor ax in [ax1, ax2]:\n    ax.set_yticks([0, 40, 80, 120])\n    ax.set_yticklabels([0, 40, 80, 120], fontsize=22)\n\n#Overall graph title\nfig.suptitle('Single Limb Hop Tests', fontsize=22)\n\nplt.tight_layout(rect=[0, 0, 1, 0.95])\n\n# Saving the graph\n#plt.savefig('Single_Limb_Hop_Tests.png', dpi=300, bbox_inches='tight')\nplt.show() #Display graph\n\n\n\npng\n\n\ndata['tss_dashboard'].value_counts()\n5 to 7 months      2021\n3 to 4 months       948\n8 to 12 months      869\nNot Reported        311\n13 to 24 months     192\nPreoperative         30\nName: tss_dashboard, dtype: int64\ngroup1 = data[data['tss_dashboard'] == '3 to 4 months']\ngroup2 = data[data['tss_dashboard'] == '5 to 7 months']\ngroup3 = data[data['tss_dashboard'] == '8 to 12 months']\naclext1 = group1['acl_ext_isok_60'].quantile(.25)\naclext3 = group1['acl_ext_isok_60'].quantile(.75)\nconext1 = group1['con_ext_isok_60'].quantile(.25)\nconext3 = group1['con_ext_isok_60'].quantile(.75)\naclflex1 = group1['acl_flex_isok_60'].quantile(.25)\naclflex3 = group1['acl_flex_isok_60'].quantile(.75)\nconflex1  = group1['con_flex_isok_60'].quantile(.25)\nconflex3  = group1['con_flex_isok_60'].quantile(.75)\nth1 = group1['th_lsi'].quantile(.25)\nth3 = group1['th_lsi'].quantile(.75)\nsh1 = group1['sh_lsi'].quantile(.25)\nsh3 = group1['sh_lsi'].quantile(.75)\nth3 - th1\n8.317282607500005\nsh3 - sh1\n18.61370936\nthg1 = group1['th_lsi'].mean()\nthg2 = group2['th_lsi'].mean()\nthg3 = group3['th_lsi'].mean()\nprint(thg1)\nprint(thg2)\nprint(thg3)\nth_iqr1 = th3 - th1\nth_iqr2 = thg2 - thg1\nth_iqr3 = thg3 - thg2\n\nprint(f\"IQR for THG Group 1: {th_iqr1}\")\nprint(f\"IQR for THG Group 2: {th_iqr2}\")\nprint(f\"IQR for THG Group 3: {th_iqr3}\")\n92.11706953\n93.59774779210657\n96.57852704372314\nIQR for THG Group 1: 8.317282607500005\nIQR for THG Group 2: 1.4806782621065793\nIQR for THG Group 3: 2.9807792516165676\nshg1 = group1['sh_lsi'].mean()\nshg2 = group2['sh_lsi'].mean()\nshg3 = group3['sh_lsi'].mean()\nprint(shg1)\nprint(shg2)\nprint(shg3)\n87.59511333887096\n91.77343810911961\n94.66267309151702\n#Data (calculated above)\nth_means = [thg1, thg2, thg3]\ntss_dashboard = ['3-4 months', '5-7 months', '8-12 months']\n\n#Calculate IQRs\nth_iqr1 = th3 - th1\nth_iqr2 = thg2 - thg1\nth_iqr3 = thg3 - thg2\n\n#Define lower and upper bounds for shading\nlower_bounds = [thg1 - th_iqr1 / 2, thg2 - th_iqr2 / 2, thg3 - th_iqr3 / 2]\nupper_bounds = [thg1 + th_iqr1 / 2, thg2 + th_iqr2 / 2, thg3 + th_iqr3 / 2]\n\n#Setting font\nplt.rc('font', family='Times New Roman', size=22)\n\n#Creating figure and plotting data\nplt.figure(figsize=(8, 8))\nplt.plot(\n    tss_dashboard,\n    th_means,\n    marker='o',\n    markersize=10,  # Match large dot size\n    linestyle='-',\n    linewidth=2,\n    color='royalblue',\n    alpha=0.5,\n    label='Mean TH LSI'\n)\n\n#Shade IQR in light green\nplt.fill_between(tss_dashboard, lower_bounds, upper_bounds, color='#64A846', alpha=0.4, label='IQR')\n\n#Label the means for each TSS group\nfor tss, th in zip(tss_dashboard, th_means):\n    plt.text(tss, th + 1.5, f'{th:.1f}', ha='center', fontsize=20)\n\n#Highlight specific patient point with red dot to indicate patient is not in IQR range\nplt.scatter('5-7 months', 77.0, color='red', s=100, zorder=5)\nplt.text('5-7 months', 77.0 + 1.5, '77.0', color='black', ha='center', fontsize=20)\n\n\nax = plt.gca()\nax.set_yticks(range(50, 101, 10))\nplt.title('TH LSI % Progression (Mean)')\nplt.xlabel('Time Since Surgery')\nplt.ylabel('TH LSI (%)')\nplt.ylim(50, max(upper_bounds) + 10)\n\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nplt.tick_params(axis='x', length=0)\nplt.grid(False)\n\n# Saving the graph\n#plt.savefig('TH_LSI_Progression.png', dpi=300, bbox_inches='tight')\n\nplt.tight_layout()\nplt.show() #Display graph\n\n\n\npng\n\n\ninterest_patient['lsi_ext_isok_60'].value_counts\n&lt;bound method IndexOpsMixin.value_counts of 4129      NaN\n4130    93.10\n4131    80.77\nName: lsi_ext_isok_60, dtype: float64&gt;\n#interest_patient.head()\ninterest_patient['tss'].value_counts() #seeing how far along interest patient was at the second visit\n3.1     1\n7.5     1\n13.1    1\nName: tss, dtype: int64\n#Setting font\nrcParams['font.family'] = 'Times New Roman'\nrcParams['font.size'] = 22\n\n#Data (calculated above)\nsh_means = [shg1, shg2, shg3]\ntss_dashboard = ['3-4 months', '5-7 months', '8-12 months']\n\n#IQR values\nsh_iqr1 = sh3 - sh1\nsh_iqr2 = shg2 - shg1\nsh_iqr3 = shg3 - shg2\n\n#Bounds for shading\nlower_bounds = [shg1 - sh_iqr1 / 2, shg2 - sh_iqr2 / 2, shg3 - sh_iqr3 / 2]\nupper_bounds = [shg1 + sh_iqr1 / 2, shg2 + sh_iqr2 / 2, shg3 + sh_iqr3 / 2]\n\n#Create figure\nplt.figure(figsize=(8, 8))\n\n#Shade IQR in light green\nplt.fill_between(tss_dashboard, lower_bounds, upper_bounds, color='#64A846', alpha=0.4)\n\n#Plot line and points for means in each TSS group\nplt.plot(\n    tss_dashboard,\n    sh_means,\n    marker='o',\n    markersize=10,\n    linestyle='-',\n    linewidth=2,\n    color='royalblue',\n    alpha=0.5\n)\n\n# Annotate mean values\nfor tss, val in zip(tss_dashboard, sh_means):\n    plt.text(tss, val + 1.5, f'{val:.1f}', ha='center', fontsize=20)\n\n#Specific patient dot labeled and colored red to indicate not in IQR range\nplt.scatter('5-7 months', 89.0, color='red', s=100, zorder=5)\nplt.text('5-7 months', 89.0 - 2.5, '89.0', color='black', ha='center', fontsize=20)\n\n\nax = plt.gca()\nax.set_yticks(range(50, 101, 10))\nplt.title('SH LSI % Progression (Mean)')\nplt.xlabel('Time Since Surgery')\nplt.ylabel('SH LSI (%)')\nplt.ylim(50, max(upper_bounds) + 10)\n\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nplt.tick_params(axis='x', rotation=0, length=0) \nplt.grid(False)\n\n# Saving the graph\n#plt.savefig('SH_LSI_Progression.png', dpi=300, bbox_inches='tight')\n\nplt.tight_layout()\nplt.show() #Display graph\n\n\n\npng\n\n\n(aclext1 / conext1) * 100\n56.8075117370892\n(aclext3 / conext3) * 100\n68.8228777292293\n(aclflex1 / conflex1) * 100\n69.94949494949493\n(aclflex3 / conflex3) * 100\n83.57142857142857\naclext = group1['acl_ext_isok_60'].mean()\nconext = group1['con_ext_isok_60'].mean()\navglsi = (aclext / conext ) *100\nprint(avglsi)\n64.43505233441954\naclextg2 = group2['acl_ext_isok_60'].mean()\nconextg2 = group2['con_ext_isok_60'].mean()\navglsig2 = (aclextg2 / conextg2 ) *100\nprint(avglsig2)\n76.32076941124286\naclextg3 = group3['acl_ext_isok_60'].mean()\nconextg3 = group3['con_ext_isok_60'].mean()\navglsig3 = (aclextg3 / conextg3 ) *100\nprint(avglsig3)\n77.91215082321446\n#Setting Font\nrcParams['font.family'] = 'Times New Roman'\nrcParams['font.size'] = 22\n\n#LSI means for quads (isokinetic); calculated above\nlsi_means = [avglsi, avglsig2, avglsig3]\ntss_dashboard = ['3-4 months', '5-7 months', '8-12 months']\n\n# Compute IQRs for ACL extension strength (not LSI directly; because of missing data\niqr1 = group1['acl_ext_isok_60'].quantile(0.75) - group1['acl_ext_isok_60'].quantile(0.25)\niqr2 = group2['acl_ext_isok_60'].quantile(0.75) - group2['acl_ext_isok_60'].quantile(0.25)\niqr3 = group3['acl_ext_isok_60'].quantile(0.75) - group3['acl_ext_isok_60'].quantile(0.25)\n\n#Compute upper and lower bounds for shading\nlower_bounds = [avglsi - iqr1 / 2, avglsig2 - iqr2 / 2, avglsig3 - iqr3 / 2]\nupper_bounds = [avglsi + iqr1 / 2, avglsig2 + iqr2 / 2, avglsig3 + iqr3 / 2]\n\n#Create figure\nplt.figure(figsize=(8, 8))\n\n#Shade IQR region in light green\nplt.fill_between(tss_dashboard, lower_bounds, upper_bounds, color='#64A846', alpha=0.4)\n\n#Plot points and trend line for values \nplt.plot(\n    tss_dashboard,\n    lsi_means,\n    marker='o',\n    markersize=10,\n    linestyle='-',\n    linewidth=2,\n    color='royalblue',\n    alpha=0.5\n)\n\n#Label mean values\nfor tss, val in zip(tss_dashboard, lsi_means):\n    plt.text(tss, val + 1.5, f'{val:.1f}', ha='center', fontsize=20)\n\n#Specific patient point labeled and colored green to indicate within/above IQR range\nplt.scatter('5-7 months', 93.10, color='#64A846', s=100, zorder=5)\nplt.text('5-7 months', 93.10 + 1.5, '93.1', color='black', ha='center', fontsize=20)\n\n\nax = plt.gca()\nax.set_yticks(range(50, 101, 10))\nplt.title('Quadricep Strength Recovery (Mean LSI %)', fontsize=22)\nplt.xlabel('Time Since Surgery', fontsize=22)\nplt.ylabel('Contralateral (%)', fontsize=22)\nplt.ylim(50, max(upper_bounds) + 30)\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nplt.tick_params(axis='x', length=0)\n\n# Saving the graph\n#plt.savefig('Quadricep_Strength_Recovery.png', dpi=300, bbox_inches='tight')\n\nplt.tight_layout()\nplt.show() #Display graph\n\n\n\npng\n\n\naclflex = group1['acl_flex_isok_60'].mean()\nconflex = group1['con_flex_isok_60'].mean()\navglsi11 = (aclflex / conflex ) *100\nprint(avglsi11)\n79.36454292375444\naclflexg2 = group2['acl_flex_isok_60'].mean()\nconflexg2 = group2['con_flex_isok_60'].mean()\navglsig22 = (aclflexg2 / conflexg2 ) *100\nprint(avglsig2)\n76.32076941124286\naclflexg3 = group3['acl_flex_isok_60'].mean()\nconflexg3 = group3['con_flex_isok_60'].mean()\navglsig32 = (aclflexg3 / conflexg3 ) *100\nprint(avglsig3)\n77.91215082321446\nacl_flexion = visit1_data['acl_flex_mvic_60'].mean()\nprint(acl_flexion)\ncon_flexion = visit1_data['con_flex_mvic_60'].mean()\nprint(con_flexion)\navg_percent = (acl_flexion / con_flexion) *100\nprint(avg_percent)\n1.1826369863013697\n0.909278350515464\n130.06325132792838\naclsh = visit1_data['acl_sh'].mean()\nprint(aclsh)\nconsh = visit1_data['con_sh'].mean()\nprint(consh)\npercent = aclsh / consh\nprint(percent)\n15.027418489065605\n16.63582125124131\n0.9033169004472387\nq11 = visit1_data['acl_sh'].quantile(0.25)\nq31 = visit1_data['acl_sh'].quantile(0.75)\niqr = q31 - q11\nprint(q11)\nprint(q31)\nprint(iqr)\n0.61\n1.5775000000000001\n0.9675000000000001\nq111 = visit1_data['con_sh'].quantile(0.25)\nq311 = visit1_data['con_sh'].quantile(0.75)\niqr = q311 - q111\nprint(q111)\nprint(q311)\nprint(iqr)\n0.68\n1.72\n1.04\npatient_one = visit1_data[visit1_data['record_id'] == 1]\nprint(patient_one)\n   record_id redcap_event_name sex_dashboard graft_dashboard2  med_meniscus  \\\n1          1     visit_1_arm_1           NaN              NaN           NaN   \n\n   lat_meniscus  lat_stab  physis visit_sex visit_graft  ...  \\\n1           NaN       NaN     NaN      Male       Other  ...   \n\n   lsi_flex_mvic_60  acl_ext_isok_60  con_ext_isok_60 lsi_ext_isok_60  \\\n1               NaN             2.57             2.92           87.86   \n\n   acl_flex_isok_60  con_flex_isok_60  lsi_flex_isok_60  \\\n1               1.5              1.45            103.32   \n\n   strength_testing_complete rts rts_tss  \n1                        2.0 NaN     NaN  \n\n[1 rows x 61 columns]\nprint(patient_one['acl_sh'])\nprint(patient_one['con_sh'])\nprint(patient_one['acl_ext_isok_60'])\nprint(patient_one['con_ext_isok_60'])\n\nsh_percentage = (patient_one['acl_sh'] / patient_one['con_sh']) * 100\nprint(sh_percentage)\n\nlsi_percentage = (patient_one['acl_ext_isok_60'] / patient_one['con_ext_isok_60']) * 100\nprint(lsi_percentage)\n1    0.81\nName: acl_sh, dtype: float64\n1    0.83\nName: con_sh, dtype: float64\n1    2.57\nName: acl_ext_isok_60, dtype: float64\n1    2.92\nName: con_ext_isok_60, dtype: float64\n1    97.590361\ndtype: float64\n1    88.013699\ndtype: float64\nprint(patient_one['acl_th'])\nprint(patient_one['con_th'])\nprint(patient_one['acl_flex_isok_60'])\nprint(patient_one['con_flex_isok_60'])\n\nth_percentage = (patient_one['acl_th'] / patient_one['con_th']) * 100\nprint(th_percentage)\n\nlsi_percentage = (patient_one['acl_ext_isok_60'] / patient_one['con_ext_isok_60']) * 100\n#print(lsi_percentage)\n\n\nflex_lsi_percentage = (patient_one['acl_flex_isok_60'] / patient_one['con_flex_isok_60']) * 100\nprint(flex_lsi_percentage)\n1   NaN\nName: acl_th, dtype: float64\n1   NaN\nName: con_th, dtype: float64\n1    1.5\nName: acl_flex_isok_60, dtype: float64\n1    1.45\nName: con_flex_isok_60, dtype: float64\n1   NaN\ndtype: float64\n1    103.448276\ndtype: float64\nvisit2_data = data[data['redcap_event_name'] == 'visit_2_arm_1']\nq12 = visit2_data['acl_sh'].quantile(0.25)\nq32 = visit2_data['acl_sh'].quantile(0.75)\niqr = q32 - q12\nprint(q12)\nprint(q32)\nprint(iqr)\n1.06\n111.0\n109.94\nq122 = visit2_data['con_sh'].quantile(0.25)\nq322 = visit2_data['con_sh'].quantile(0.75)\niqr = q322 - q122\nprint(q122)\nprint(q322)\nprint(iqr)\n1.2\n121.0\n119.8\nvisit_2_mean = visit2_data['lsi_ext_isok_60'].mean()\nprint(visit_2_mean)\n78.97715718975918\nvisit1_data = data[data['redcap_event_name'] == 'visit_1_arm_1']\n\n# Calculate IQR for 'lsi' column\nq1 = visit1_data['lsi_ext_isok_60'].quantile(0.25)\nq3 = visit1_data['lsi_ext_isok_60'].quantile(0.75)\niqr = q3 - q1\n\nprint(f\"IQR for lsi at visit 1: {iqr}\")\nIQR for lsi at visit 1: 28.58\nvisit3_data = data[data['redcap_event_name'] == 'visit_3_arm_1']\n\n# Calculate IQR for 'lsi' column\nq1 = visit3_data['lsi_ext_isok_60'].quantile(0.25)\nq3 = visit3_data['lsi_ext_isok_60'].quantile(0.75)\niqr = q3 - q1\n\nprint(f\"IQR for lsi at visit 1: {iqr}\")\nIQR for lsi at visit 1: 28.1579624675\ntotal_missing = visit1_data.isnull().sum().sum()\nprint(f\"Total missing values: {total_missing}\")\nTotal missing values: 97183\n#Mean ACL RSI for Patients\nvisit_1_rsi = visit1_data['acl_rsi'].mean()\nvisit_1_rsi\n62.274216184971095\n#Heat Map of Missing Data\nmissing_data = data.isna()\n\n# Set the figure size\nmissing_data = data.isna()\n\n\nplt.figure(figsize=(15, 10))\nsns.heatmap(missing_data, cbar=False, cmap='coolwarm', yticklabels=False)\n#cool warm setting has missing values in red\n\nplt.title('Missing Data Heatmap')\nplt.xlabel('Columns')\nplt.ylabel('Rows')\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.tick_params(axis='y', which='both',length=0)\n\n# Saving the graph\n#plt.savefig('missing_data_heatmap.png', dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\npng\n\n\nPossible Strategies for Missing Data - If missing values are for numeric variables and there are less than 75 missing values, I think imputation could be a good idea.\nResearch Questions: 1. How does reinjury relate to age, graft, and quadricep strength? 2. As time since surgery increases, how do torque and flexion/extension change? 3. Does visit number have a relationship with their performance?\nVisualization Ideas: 1. If correlation is found- trends or scatter plot 2. Distribution of RSI scores or LSI for reinjured grouping.\nGoals: 1. Impute values for some missing data values if group members agree.\nFor the future, I want to see what my group members found interesting. This will help direct our questions and visualization ideas.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "datadictionary.html",
    "href": "datadictionary.html",
    "title": "4  Data Dictionary",
    "section": "",
    "text": "This document contains a data dictionary for the patient data collected in the study. Each variable is defined below:\n\n\n\n\n\n\n\nVariable Name\nDescription\n\n\n\n\nrecord_id\nThe number assigned to each individual patient (starting at 1)\n\n\nredcap_event_name\nDescribes the visit when the data was recorded\n\n\nsex_dashboard\nSex of patient (Male, Female, Not Reported)\n\n\ngraft_dashboard2\nPatient graft type\n\n\nvisit_sex\nSex of patient (Male, Female, Not Reported)\n\n\nvisit_graft\nPatient graft type\n\n\nage\nAge of patient at time of visit (in years)\n\n\nheight_m\nPatient height (in meters)\n\n\nmass_kg\nPatient weight (in kilograms)\n\n\nbmi\nBody Mass Index (BMI) of patient\n\n\ntss\nTime Since Surgery (in months)\n\n\ntss_dashboard\nString of the time since surgery range (in months)\n\n\nikdc\nInternational Knee Documentation Committee score\n\n\nkoos_pain\nKnee Injury and Osteoarthritis Outcome Score pain score\n\n\nacl_rsi\nACL Return to Sport Index score (mental readiness post-surgery)\n\n\nacl_sh\nSingle Hop Score for ACLR side\n\n\ncon_sh\nSingle Hop Score for contralateral side\n\n\nsh_lsi\nSingle Hop LSI (limb symmetry index), % injured vs. uninjured limb\n\n\nacl_th\nTriple Hop Score for ACLR side\n\n\ncon_th\nTriple Hop Score for contralateral side\n\n\nth_lsi\nTriple Hop LSI (limb symmetry index), % injured vs. uninjured limb\n\n\nacl_ext_mvic_60\nACLR Extension MVIC Torque at 60° flexion (Nm/kg)\n\n\ncon_ext_mvic_60\nContralateral Extension MVIC Torque at 60° flexion (Nm/kg)\n\n\nlsi_ext_mvic_60\nLSI % for Extension MVIC Torque at 60° flexion (Nm/kg)\n\n\nacl_flex_mvic_60\nACLR Flexion MVIC Torque at 60° flexion (Nm/kg)\n\n\ncon_flex_mvic_60\nContralateral Flexion MVIC Torque at 60° flexion (Nm/kg)\n\n\nlsi_flex_mvic_60\nLSI % for Flexion MVIC Torque at 60° flexion (Nm/kg)\n\n\nacl_ext_isok_60\nACLR Isokinetic Extension Torque at 60° flexion (Nm/kg)\n\n\ncon_ext_isok_60\nContralateral Isokinetic Extension Torque at 60° flexion (Nm/kg)\n\n\nlsi_ext_isok_60\nLSI % for Isokinetic Extension Torque at 60° flexion (Nm/kg)\n\n\nacl_flex_isok_60\nACLR Isokinetic Flexion Torque at 60° flexion (Nm/kg)\n\n\ncon_flex_isok_60\nContralateral Isokinetic Flexion Torque at 60° flexion (Nm/kg)\n\n\nlsi_flex_isok_60\nLSI % for Isokinetic Flexion Torque at 60° flexion (Nm/kg)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Dictionary</span>"
    ]
  }
]